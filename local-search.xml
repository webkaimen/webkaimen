<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue + element 检验开始时间与结束时间</title>
    <link href="/2022/04/25/article-17/"/>
    <url>/2022/04/25/article-17/</url>
    
    <content type="html"><![CDATA[<p class="note note-success"> 好用的开始时间与结束时间比较，结束时间不得大于开始时间并清除结束时间。为了提前规范用户输入数据的正确性，前端要提前判断一些简单的逻辑，引导用户输入合理的数据。</p><span id="more"></span><p><img src="/../images/90711640-23CD-478f-B5C9-2089D716075Ea2.gif" alt="日期校验.gif"></p><h3 id="1-表单样式"><a href="#1-表单样式" class="headerlink" title="1.表单样式"></a>1.表单样式</h3><p>写在<code>&lt;template&gt;</code>中或者<code>&lt;el-dialog&gt;</code>弹窗里</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">&lt;el-col <span class="hljs-symbol">:span=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><br>  &lt;el-form-item label=<span class="hljs-string">&quot;起始日期&quot;</span> prop=<span class="hljs-string">&quot;startDate&quot;</span>&gt;<br>    &lt;el-date-picker<br>      v-model=<span class="hljs-string">&quot;form.startDate&quot;</span><br>      type=<span class="hljs-string">&quot;datetime&quot;</span><br>      placeholder=<span class="hljs-string">&quot;选择起始日期&quot;</span><br>      <span class="hljs-symbol">:picker-options=<span class="hljs-string">&quot;pickerOptionsStart&quot;</span></span><br>      <span class="hljs-variable">@change</span>=<span class="hljs-string">&quot;changeStart&quot;</span><br>      size=<span class="hljs-string">&quot;small&quot;</span><br>      <span class="hljs-symbol">:disabled=<span class="hljs-string">&quot;isOnlyShow&quot;</span></span><br>    &gt;<br>    &lt;/el-date-picker&gt;<br>  &lt;/el-form-item&gt;<br>&lt;/el-col&gt;<br>&lt;el-col <span class="hljs-symbol">:span=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><br>  &lt;el-form-item label=<span class="hljs-string">&quot;截止日期&quot;</span> prop=<span class="hljs-string">&quot;endDate&quot;</span>&gt;<br>    &lt;el-date-picker<br>      v-model=<span class="hljs-string">&quot;form.endDate&quot;</span><br>      type=<span class="hljs-string">&quot;datetime&quot;</span><br>      placeholder=<span class="hljs-string">&quot;选择起始日期&quot;</span><br>      default-time=<span class="hljs-string">&quot;[&#x27;23:59:59&#x27;]&quot;</span><br>      <span class="hljs-symbol">:picker-options=<span class="hljs-string">&quot;pickerOptionsEnd&quot;</span></span><br>      <span class="hljs-variable">@change</span>=<span class="hljs-string">&quot;changeEnd&quot;</span><br>      size=<span class="hljs-string">&quot;small&quot;</span><br>      <span class="hljs-symbol">:disabled=<span class="hljs-string">&quot;isOnlyShow&quot;</span></span><br>    &gt;<br>    &lt;/el-date-picker&gt;<br>  &lt;/el-form-item&gt;<br>&lt;/el-col&gt;<br>&lt;el-col <span class="hljs-symbol">:span=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><br>  &lt;el-form-item label=<span class="hljs-string">&quot;最后截止&quot;</span> prop=<span class="hljs-string">&quot;lastPayDate&quot;</span>&gt;<br>    &lt;el-date-picker<br>      v-model=<span class="hljs-string">&quot;form.lastPayDate&quot;</span><br>      type=<span class="hljs-string">&quot;datetime&quot;</span><br>      placeholder=<span class="hljs-string">&quot;请选择最后缴费日期&quot;</span><br>      default-time=<span class="hljs-string">&quot;[&#x27;23:59:59&#x27;]&quot;</span><br>      <span class="hljs-symbol">:picker-options=<span class="hljs-string">&quot;pickerOptionsEndLastPay&quot;</span></span><br>      <span class="hljs-variable">@change</span>=<span class="hljs-string">&quot;changeLastPayDate&quot;</span><br>      size=<span class="hljs-string">&quot;small&quot;</span><br>      <span class="hljs-symbol">:disabled=<span class="hljs-string">&quot;isOnlyShow&quot;</span></span><br>    &gt;<br>    &lt;/el-date-picker&gt;<br>  &lt;/el-form-item&gt;<br>&lt;/el-col&gt;<br></code></pre></div></td></tr></table></figure><h3 id="2-data-定义以及操作方法"><a href="#2-data-定义以及操作方法" class="headerlink" title="2.data 定义以及操作方法"></a>2.data 定义以及操作方法</h3><figure class="highlight kotlin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs kotlin">&lt;script&gt;<br>export default &#123;<br>  <span class="hljs-keyword">data</span>() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      pickerOptionsStart: &#123;&#125;,<br>      pickerOptionsEnd: &#123;&#125;,<br>      pickerOptionsEndLastPay: &#123;&#125;,<br>    &#125;;<br>  &#125;,<br>  methods: &#123;<br>    changeStart() &#123;<br>      <span class="hljs-comment">// 限制开始时间</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.form.startDate != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.form.endDate &lt;= <span class="hljs-keyword">this</span>.form.startDate) &#123;<br>          <span class="hljs-keyword">this</span>.$message.warning(<span class="hljs-string">&#x27;结束时间必须大于开始时间！&#x27;</span>);<br>          <span class="hljs-keyword">this</span>.form.startDate = <span class="hljs-string">&#x27;&#x27;</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">this</span>.pickerOptionsEnd = Object.assign(&#123;&#125;, <span class="hljs-keyword">this</span>.pickerOptionsEnd, &#123;<br>        disabledDate: time =&gt; &#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.form.startDate) &#123;<br>            <span class="hljs-keyword">return</span> time.getTime() &lt; <span class="hljs-keyword">this</span>.form.startDate;<br>          &#125;<br>        &#125;,<br>      &#125;);<br>    &#125;,<br><br>    changeEnd() &#123;<br>      <span class="hljs-comment">// 限制结束时间</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.form.startDate != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.form.endDate &lt;= <span class="hljs-keyword">this</span>.form.startDate) &#123;<br>          <span class="hljs-keyword">this</span>.$message.warning(<span class="hljs-string">&#x27;截止时间必须大于起始时间！&#x27;</span>);<br>          <span class="hljs-keyword">this</span>.form.endDate = <span class="hljs-string">&#x27;&#x27;</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">this</span>.pickerOptionsStart = Object.assign(&#123;&#125;, <span class="hljs-keyword">this</span>.pickerOptionsStart, &#123;<br>        disabledDate: time =&gt; &#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.form.endDate) &#123;<br>            <span class="hljs-keyword">return</span> time.getTime() &gt; <span class="hljs-keyword">this</span>.form.endDate;<br>          &#125;<br>        &#125;,<br>      &#125;);<br>      <span class="hljs-comment">// 限制截至时间</span><br>      <span class="hljs-keyword">this</span>.pickerOptionsEndLastPay = Object.assign(<br>        &#123;&#125;,<br>        <span class="hljs-keyword">this</span>.pickerOptionsEndLastPay,<br>        &#123;<br>          disabledDate: time =&gt; &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.form.endDate) &#123;<br>              <span class="hljs-keyword">return</span> time.getTime() &lt; <span class="hljs-keyword">this</span>.form.endDate;<br>            &#125;<br>          &#125;,<br>        &#125;,<br>      );<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br><br></code></pre></div></td></tr></table></figure><p>一般只需要做开始时间和结束时间，三个事件校验很不好控制容易出问题的。5555~~</p>]]></content>
    
    
    <categories>
      
      <category>ElementUI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#Vue.js</tag>
      
      <tag>#ElementUI</tag>
      
      <tag>#el-input</tag>
      
      <tag>表单校验</tag>
      
      <tag>#校验时间</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElementUI输入框做手机号校验,必填项不清空</title>
    <link href="/2022/04/25/article-16/"/>
    <url>/2022/04/25/article-16/</url>
    
    <content type="html"><![CDATA[<p class="note note-success"> 今天测试发现手机号可以随便输入文字，让改成只能输入手机号.<br/>我改完这个bug发现输入文字确认以后离开输入框，再输入正确的手机号，Element的表单校验却一直是校验不通过</p><span id="more"></span><p>贴个 bug.gif<br><img src="/../images/90711640-23CD-478f-B5C9-2089D716075Ee.gif" alt="bug.gif"></p><h3 id="1-校验规则"><a href="#1-校验规则" class="headerlink" title="1.校验规则"></a>1.校验规则</h3><p>首先是手机号校验只能输入数字,并且只能输入 11 位</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">&lt;<span class="hljs-keyword">el</span>-<span class="hljs-keyword">col</span> :span=<span class="hljs-string">&quot;12&quot;</span>&gt;<br>  &lt;<span class="hljs-keyword">el</span>-form-item label=<span class="hljs-string">&quot;手机号码&quot;</span> prop=<span class="hljs-string">&quot;phoneNumber&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">el</span>-<span class="hljs-built_in">input</span><br>      v-model=<span class="hljs-string">&quot;form.phoneNumber&quot;</span><br>      placeholder=<span class="hljs-string">&quot;请输入手机号码&quot;</span><br>      maxlength=<span class="hljs-string">&quot;11&quot;</span><br>      oninput=<span class="hljs-string">&quot;value=value.replace(/[^\d]/g,&#x27;&#x27;)&quot;</span><br>      @input=<span class="hljs-string">&quot;onPasswordInput&quot;</span><br>    /&gt;<br>  &lt;/<span class="hljs-keyword">el</span>-form-item&gt;<br>&lt;/<span class="hljs-keyword">el</span>-<span class="hljs-keyword">col</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2.解决问题"></a>2.解决问题</h3><p>只要在<code>el-input</code>组件中加入<code>@blur=&quot;$event =&gt; &#123;form.phoneNumber = Number($event.target.value) || &#39;&#39;;&#125;&quot;</code>就解决了。</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">&lt;<span class="hljs-keyword">el</span>-<span class="hljs-keyword">col</span> :span=<span class="hljs-string">&quot;12&quot;</span>&gt;<br>  &lt;<span class="hljs-keyword">el</span>-form-item label=<span class="hljs-string">&quot;手机号码&quot;</span> prop=<span class="hljs-string">&quot;phoneNumber&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">el</span>-<span class="hljs-built_in">input</span><br>      v-model=<span class="hljs-string">&quot;form.phoneNumber&quot;</span><br>      placeholder=<span class="hljs-string">&quot;请输入手机号码&quot;</span><br>      maxlength=<span class="hljs-string">&quot;11&quot;</span><br>      oninput=<span class="hljs-string">&quot;value=value.replace(/[^\d]/g,&#x27;&#x27;)&quot;</span><br>      @blur=<span class="hljs-string">&quot;$event =&gt; &#123;form.phoneNumber = Number($event.target.value) || &#x27;&#x27;;&#125;&quot;</span><br>      @input=<span class="hljs-string">&quot;onPasswordInput&quot;</span><br>    /&gt;<br>  &lt;/<span class="hljs-keyword">el</span>-form-item&gt;<br>&lt;/<span class="hljs-keyword">el</span>-<span class="hljs-keyword">col</span>&gt;<br></code></pre></div></td></tr></table></figure><p>贴个解决了的图</p><p><img src="/../images/90711640-23CD-478f-B5C9-2089D716075Ef.gif" alt="bug.gif"></p><h3 id="3-金额校验"><a href="#3-金额校验" class="headerlink" title="3.金额校验"></a>3.金额校验</h3><p>贴个类似的金额校验<br><br/>只允许两位小数</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">&lt;el<span class="hljs-literal">-form-item</span> label=<span class="hljs-string">&quot;本期应收&quot;</span> prop=<span class="hljs-string">&quot;fee&quot;</span>&gt;<br>  &lt;el<span class="hljs-literal">-input</span><br>    v<span class="hljs-literal">-model</span>=<span class="hljs-string">&quot;form.fee&quot;</span><br>    oninput=<span class="hljs-string">&quot;value=((value.replace(/[^0-9.]/g,&#x27;&#x27;).replace(/^\./g,&#x27;&#x27;).replace(&#x27;.&#x27;,&#x27;<span class="hljs-variable">$</span>#<span class="hljs-variable">$</span>&#x27;).replace(/\./g,&#x27;&#x27;).replace(&#x27;<span class="hljs-variable">$</span>#<span class="hljs-variable">$</span>&#x27;,&#x27;.&#x27;).replace(/^(\-)*(\d+)\.(\d\d).*<span class="hljs-variable">$</span>/,&#x27;<span class="hljs-variable">$1</span><span class="hljs-variable">$2</span>.<span class="hljs-variable">$3</span>&#x27;)))&quot;</span><br>    @blur=<span class="hljs-string">&quot;</span><br><span class="hljs-string">      <span class="hljs-variable">$event</span> =&gt; &#123;</span><br><span class="hljs-string">        this.form.fee = Number(<span class="hljs-variable">$event</span>.target.value) || &#x27;&#x27;;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &quot;</span><br>    placeholder=<span class="hljs-string">&quot;请输入本期应收&quot;</span><br>    size=<span class="hljs-string">&quot;small&quot;</span><br>    :disabled=<span class="hljs-string">&quot;isOnlyShow&quot;</span><br>  &gt;<br>    &lt;template slot=<span class="hljs-string">&quot;append&quot;</span>&gt;元&lt;/template&gt;<br>  &lt;/el<span class="hljs-literal">-input</span>&gt;<br>&lt;/el<span class="hljs-literal">-form-item</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="/../images/90711640-23CD-478f-B5C9-2089D716075Ef.gif" alt="金额校验.gif"></p>]]></content>
    
    
    <categories>
      
      <category>ElementUI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#Vue.js</tag>
      
      <tag>#ElementUI</tag>
      
      <tag>#校验</tag>
      
      <tag>#el-input</tag>
      
      <tag>表单校验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 apiDoc 为你的Node.js API 生成文档</title>
    <link href="/2022/04/16/article-15/"/>
    <url>/2022/04/16/article-15/</url>
    
    <content type="html"><![CDATA[<p class="note note-success"> 写完 api 接口，就需要编写 api 文档了，如果一个个手写的话就很麻烦，就得使用 apidoc 只需要通过写注释，就可以快速生成文档了。</p><span id="more"></span><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>第一步先安装全局模块 <code>apidoc</code>。</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> apidoc -g<br></code></pre></div></td></tr></table></figure><p>写注释</p><p>未完待续…</p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#Node.js</tag>
      
      <tag>#apiDoc</tag>
      
      <tag>#API</tag>
      
      <tag>#生成文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express生成的服务器上开发用到的依赖以及修改</title>
    <link href="/2022/04/15/article-14/"/>
    <url>/2022/04/15/article-14/</url>
    
    <content type="html"><![CDATA[<p class="note note-success"> 当我们通过应用生成器工具 `express-generator` 快速创建一个应用之后。<br/>我们随意还可以使用此结构或修改它以最好地满足我们的需求。</p><span id="more"></span><h2 id="1-在代码里修改端口号并控制台输出该-url"><a href="#1-在代码里修改端口号并控制台输出该-url" class="headerlink" title="1.在代码里修改端口号并控制台输出该 url"></a>1.在代码里修改端口号并控制台输出该 url</h2><p>在根目录下<code>bin/www</code>文件中第 15 行找到<code>var port = normalizePort(process.env.PORT || &quot;3000&quot;);</code> 3000 就是改服务器的启动端口,我们可以选中修改或不修改。<br/>我在代码中修改端口号为 4399 并且输出了服务地址</p><p><code>bin/www</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-meta">#!/usr/bin/env node</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Module dependencies.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> app = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../app&quot;</span>);<br><span class="hljs-keyword">var</span> debug = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;debug&quot;</span>)(<span class="hljs-string">&quot;server:server&quot;</span>);<br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Get port from environment and store in Express.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> port = <span class="hljs-title function_">normalizePort</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-string">&quot;4399&quot;</span>);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;port&quot;</span>, port);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`服务器地址: http://localhost:<span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Create HTTP server.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> server = http.<span class="hljs-title function_">createServer</span>(app);<br></code></pre></div></td></tr></table></figure><h2 id="2-nodemon-加速开发"><a href="#2-nodemon-加速开发" class="headerlink" title="2.nodemon 加速开发"></a>2.nodemon 加速开发</h2><p><a href="https://www.npmjs.com/package/nodemon">Nodemon</a> 是一款颇受欢迎的开发服务器，能够检测工作区代码的变化，并自动重启。</p><p>通过以下命令安装 nodemon：</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install nodemon <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><p>这里我们将 <code>nodemon</code> 安装为依赖。同时我们在 <code>package.json</code> 中加入 <code>start</code> 命令，代码如下：</p><p><code>package.json</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;server&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodemon ./bin/www&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node ./bin/www&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;cookie-parser&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.4.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~2.6.9&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;express&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~4.16.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;morgan&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;~1.9.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;nodemon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.15&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="3-使用-Winston-库来构建一个简单的日志功能。"><a href="#3-使用-Winston-库来构建一个简单的日志功能。" class="headerlink" title="3.使用 Winston 库来构建一个简单的日志功能。"></a>3.使用 Winston 库来构建一个简单的日志功能。</h2><p><a href="https://www.npmjs.com/package/winston">Winston</a> 是强大、灵活的 <code>Node.js</code> 开源日志库之一，理论上， <code>Winston</code> 是一个可以记录所有信息的记录器。这是一个高度直观的工具，易于定制。可以通过更改几行代码来调整其背后的逻辑。它使对数据库或文件等持久存储位置的日志记录变得简单容易。</p><p>实践代码将在项目中增加日志功能，安装依赖：</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install winston <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><p>然后建一个<code>utils</code>文件夹，用以存放一些常用的公共方法，和一些实用的方法和数据结构.</p><p>在<code>utils</code>文件夹中新建<code>logger.js</code>,代码如下：</p><p><code>logger.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; createLogger, format, transports &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;winston&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-keyword">const</span> env = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> || <span class="hljs-string">&quot;development&quot;</span>;<br><span class="hljs-keyword">const</span> logDir = <span class="hljs-string">&quot;log&quot;</span>;<br><br><span class="hljs-comment">// Create the log directory if it does not exist</span><br><span class="hljs-keyword">if</span> (!fs.<span class="hljs-title function_">existsSync</span>(logDir)) &#123;<br>  fs.<span class="hljs-title function_">mkdirSync</span>(logDir);<br>&#125;<br><br><span class="hljs-keyword">const</span> filename = path.<span class="hljs-title function_">join</span>(logDir, <span class="hljs-string">&quot;results.log&quot;</span>);<br><br><span class="hljs-keyword">const</span> logger = <span class="hljs-title function_">createLogger</span>(&#123;<br>  <span class="hljs-comment">// change level if in dev environment versus production</span><br>  <span class="hljs-attr">level</span>: env === <span class="hljs-string">&quot;production&quot;</span> ? <span class="hljs-string">&quot;info&quot;</span> : <span class="hljs-string">&quot;debug&quot;</span>,<br>  <span class="hljs-attr">format</span>: format.<span class="hljs-title function_">combine</span>(<br>    format.<span class="hljs-title function_">label</span>(&#123; <span class="hljs-attr">label</span>: path.<span class="hljs-title function_">basename</span>(process.<span class="hljs-property">mainModule</span>.<span class="hljs-property">filename</span>) &#125;),<br>    format.<span class="hljs-title function_">timestamp</span>(&#123; <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span> &#125;)<br>  ),<br>  <span class="hljs-attr">transports</span>: [<br>    <span class="hljs-keyword">new</span> transports.<span class="hljs-title class_">Console</span>(&#123;<br>      <span class="hljs-attr">format</span>: format.<span class="hljs-title function_">combine</span>(<br>        format.<span class="hljs-title function_">colorize</span>(),<br>        format.<span class="hljs-title function_">printf</span>(<br>          <span class="hljs-function">(<span class="hljs-params">info</span>) =&gt;</span><br>            <span class="hljs-string">`<span class="hljs-subst">$&#123;info.timestamp&#125;</span> <span class="hljs-subst">$&#123;info.level&#125;</span> [<span class="hljs-subst">$&#123;info.label&#125;</span>]: <span class="hljs-subst">$&#123;info.message&#125;</span>`</span><br>        )<br>      ),<br>    &#125;),<br>    <span class="hljs-keyword">new</span> transports.<span class="hljs-title class_">File</span>(&#123;<br>      filename,<br>      <span class="hljs-attr">format</span>: format.<span class="hljs-title function_">combine</span>(<br>        format.<span class="hljs-title function_">printf</span>(<br>          <span class="hljs-function">(<span class="hljs-params">info</span>) =&gt;</span><br>            <span class="hljs-string">`<span class="hljs-subst">$&#123;info.timestamp&#125;</span> <span class="hljs-subst">$&#123;info.level&#125;</span> [<span class="hljs-subst">$&#123;info.label&#125;</span>]: <span class="hljs-subst">$&#123;info.message&#125;</span>`</span><br>        )<br>      ),<br>    &#125;),<br>  ],<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = logger;<br></code></pre></div></td></tr></table></figure><p>然后在根目录下的<code>app.js</code>文件中引用它</p><p><code>app.js</code></p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-comment">// 错误信息返回</span><br><span class="hljs-keyword">var</span> createError = require(<span class="hljs-string">&quot;http-errors&quot;</span>);<br><span class="hljs-keyword">var</span> express = require(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">var</span> path = require(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">var</span> cookieParser = require(<span class="hljs-string">&quot;cookie-parser&quot;</span>);<br><span class="hljs-keyword">var</span> logger = require(<span class="hljs-string">&quot;./logger&quot;</span>);<br><span class="hljs-keyword">var</span> morgan = require(<span class="hljs-string">&quot;morgan&quot;</span>);<br><br><span class="hljs-keyword">var</span> indexRouter = require(<span class="hljs-string">&quot;./routes/index&quot;</span>);<br><span class="hljs-keyword">var</span> usersRouter = require(<span class="hljs-string">&quot;./routes/users&quot;</span>);<br><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">app</span> = express();<br><br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(morgan(<span class="hljs-string">&quot;dev&quot;</span>));<br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(express.json());<br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(express.urlencoded(&#123; extended: false &#125;));<br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(cookieParser());<br><br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(express.static(path.join(__dirname, <span class="hljs-string">&quot;public&quot;</span>)));<br><br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;/&quot;</span>, indexRouter);<br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;/users&quot;</span>, usersRouter);<br><br><span class="hljs-comment">// catch 404 and forward to error handler</span><br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(function (req, res, next) &#123;<br>  next(createError(404));<br>&#125;);<br><br><span class="hljs-comment">// 接口404生成错误日志</span><br><span class="hljs-keyword">const</span> _errorHeader = (<span class="hljs-keyword">err</span>, req, res, next) =&gt; &#123;<br>  logger.<span class="hljs-keyword">error</span>(`<span class="hljs-variable">$&#123;req</span>.method&#125; <span class="hljs-variable">$&#123;req</span>.originalUrl&#125;` + <span class="hljs-keyword">err</span>.message);<br>  <span class="hljs-keyword">const</span> errorMsg = <span class="hljs-keyword">err</span>.message;<br>  res.status(<span class="hljs-keyword">err</span>.status || 500).json(&#123;<br>    code: -1,<br>    success: true,<br>    message: errorMsg,<br>    data: &#123;&#125;,<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(_errorHeader);<br><br>module.exports = <span class="hljs-keyword">app</span>;<br></code></pre></div></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>引入<code>logger</code>前</p><p><code>var morgan = require(&quot;morgan&quot;);</code>之前是<code>var logger = require(&quot;morgan&quot;);</code><br/><br><code>app.use(morgan(&quot;dev&quot;));</code>之前是<code>app.use(logger(&quot;dev&quot;));</code></p><p>然后在路由里接口请求错误 404,<code>log</code>文件夹就会生成错误信息了</p><p><img src="/../images/D7A9A08A-858A-48ed-BEF0-53ADDAF401F0.png" alt="接口请求错误404"></p><p>生成的日志</p><p><img src="/../images/092483C1-F713-4f5e-BD1E-21D90367F25E.png" alt="错误日志"></p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#Node.js</tag>
      
      <tag>#服务器</tag>
      
      <tag>#Express</tag>
      
      <tag>#依赖包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express生成器快速搭建web服务器</title>
    <link href="/2022/04/15/article-13/"/>
    <url>/2022/04/15/article-13/</url>
    
    <content type="html"><![CDATA[<p class="note note-success"> 通过应用生成器工具 express-generator 可以快速创建一个应用的骨架。<br/>生成器创建的应用程序结构只是构建Express应用程序的众多方法之一，随意使用此结构或修改它以最好地满足你的需求。</p><span id="more"></span><p><a href="https://www.expressjs.com.cn/starter/generator.html">express 官网</a></p><p>安装 express 生成器<br><code>npm i -g express-generator</code><br>使用 express 初始化项目结构<br><code>express --no-view 项目名称</code></p><p><img src="/./images/1650014324.jpg" alt="express生成器"></p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><br>├── app<span class="hljs-selector-class">.js</span><br>├── bin<br>│   └── www<br>├── package<span class="hljs-selector-class">.json</span><br>├── public<br>│   ├── images<br>│   ├── javascripts<br>│   └── stylesheets<br>│       └── style<span class="hljs-selector-class">.css</span><br>│   ├── index<span class="hljs-selector-class">.html</span><br>├── routes<br>│   ├── index<span class="hljs-selector-class">.js</span><br>│   └── users<span class="hljs-selector-class">.js</span><br>└── views<br>    ├── error<span class="hljs-selector-class">.pug</span><br>    ├── index<span class="hljs-selector-class">.pug</span><br>    └── layout<span class="hljs-selector-class">.pug</span><br><br><span class="hljs-number">7</span> directories, <span class="hljs-number">10</span> files<br><br></code></pre></div></td></tr></table></figure><p>进入项目目录<br><code>cd server</code><br>命令行中修改为新建项目下，并安装依赖<br><code>npm i</code><br>启动 express 服务<br><code>npm run start</code></p><p>然后在浏览器中打开<code>http://localhost:3000</code> 就可以打开这个项目了。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/Charissa2017/article/details/105034452">express 简介及使用 express-generator 快速搭建项目框架</a></p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#Node.js</tag>
      
      <tag>#服务器</tag>
      
      <tag>#Express</tag>
      
      <tag>#生成器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element-ui表单验证遇到v-if时不生效</title>
    <link href="/2022/03/28/article-12/"/>
    <url>/2022/03/28/article-12/</url>
    
    <content type="html"><![CDATA[<p><img src="/./images/90711640-23CD-478f-B5C9-2089D716075A.png" alt="注册功能"><br><img src="/./images/90711640-23CD-478f-B5C9-2089D716075B.png" alt="注册功能"></p><p class="note note-success"> 今天在项目中遇到一个问题，需要 v-if 渲染的 el-form-item 组件使用 prop 设置规则校验时不生效：</p><h3 id="发现问题：校验规则不生效"><a href="#发现问题：校验规则不生效" class="headerlink" title="发现问题：校验规则不生效"></a>发现问题：校验规则不生效</h3><p><code>el-form-item</code> 组件使用 <code>prop</code> 设置规则校验时不生效</p><p>贴个没解决前的 gif<br><img src="/./images/90711640-23CD-478f-B5C9-2089D716075C.gif" alt="注册功能"></p><p>然后我尝试把注册页面改成默认展示,发现该问题不存在<br><img src="/./images/90711640-23CD-478f-B5C9-2089D716075D.gif" alt="注册功能"></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>给该 <code>el-form-item</code> 设置一个 <code>key</code> 即可</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-register&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;contain&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-box&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; active: isLogin &#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-contain&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isLogin&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;loginForm&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">status-icon</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;loginForm&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;100px&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-form&quot;</span></span><br><span class="hljs-tag">          &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;账号&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;loginForm.username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span><br><span class="hljs-tag">                <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;loginForm.password&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">              &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span></span><br><span class="hljs-tag">              &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>忘记密码?<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>&lt;/el-form-item<br>            &gt;<br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span><br><span class="hljs-tag">                <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 40%&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span><br><span class="hljs-tag">                @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;submitForm(&#x27;loginForm&#x27;)&quot;</span></span><br><span class="hljs-tag">                &gt;</span>登录&lt;/el-button<br>              &gt;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-divider</span>&gt;</span>社交账号直接登录<span class="hljs-tag">&lt;/<span class="hljs-name">el-divider</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span>&gt;</span>微信<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span>&gt;</span>QQ<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span>&gt;</span>GitHub<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span>&gt;</span>Gitee<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-contain&quot;</span> <span class="hljs-attr">v-else</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;loginForm&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">status-icon</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;loginForm&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;100px&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-form&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">:selfUpdate</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">          &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;账号&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;loginForm.username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span><br><span class="hljs-tag">                <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;loginForm.password&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">              &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;确认密码&quot;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;checkPass&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;checkPass&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span><br><span class="hljs-tag">                <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;loginForm.checkPass&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span><br><span class="hljs-tag">              &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span><br><span class="hljs-tag">                <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 40%&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span><br><span class="hljs-tag">                @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;registerSubmitForm(&#x27;loginForm&#x27;)&quot;</span></span><br><span class="hljs-tag">                &gt;</span>提交&lt;/el-button<br>              &gt;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small-box&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; active: isLogin &#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small-contain&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isLogin&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;stitle&quot;</span>&gt;</span>你好，朋友!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;scontent&quot;</span>&gt;</span>开始注册，和我们一起旅行<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 60%&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeType&quot;</span> <span class="hljs-attr">round</span></span><br><span class="hljs-tag">            &gt;</span>注册&lt;/el-button<br>          &gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;small-contain&quot;</span> <span class="hljs-attr">v-else</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;stitle&quot;</span>&gt;</span>欢迎回来!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;scontent&quot;</span>&gt;</span>与我们保持联系，请登录你的账户<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 60%&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeType&quot;</span> <span class="hljs-attr">round</span></span><br><span class="hljs-tag">            &gt;</span>登录&lt;/el-button<br>          &gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="/./images/90711640-23CD-478f-B5C9-2089D716075E.gif" alt="注册功能"></p><p>完美解决</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>因为 v-if 在两个相同表单或组件且没有 <code>key</code> 标识唯一性的情况下，会复用已有元素而不是从头开始渲染</p><h3 id="demo-地址"><a href="#demo-地址" class="headerlink" title="demo 地址"></a>demo 地址</h3><!-- [login-register-demo](https://gitee.com/Robbinweb/login-register-demo) --><p><a href="https://gitee.com/Robbinweb/login-register-demo" target="_blank">login-register-demo</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#Vue.js</tag>
      
      <tag>#ElementUI</tag>
      
      <tag>#v-if</tag>
      
      <tag>#el-form-item</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>还不曾去过倒悬山</title>
    <link href="/2022/03/08/article-11/"/>
    <url>/2022/03/08/article-11/</url>
    
    <content type="html"><![CDATA[<p><img src="/./images/3083EAE2-7B99-42B6-9E19-3A4027086CCD.png" alt="还不曾去过倒悬山"></p><p class="note note-success">这一日，倒悬山多了一位外乡剑仙。<br/>无人知其姓名 山水邸报也未有记载。<br/>只知他两把飞剑惊才绝艳，<br/>一柄红炉，一柄点血。<br/>那外乡剑仙在城头酩酊大醉后独往蛮荒，剑斩王座，潇洒而去<br/>唯有城墙上刻字"来过"<br/></p><p>过倒悬山,剑至浩然。</p>]]></content>
    
    
    <categories>
      
      <category>生活随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#红炉点雪</tag>
      
      <tag>#剑来</tag>
      
      <tag>#生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-cli脚手架中引入elementUI框架</title>
    <link href="/2022/03/08/article-3/"/>
    <url>/2022/03/08/article-3/</url>
    
    <content type="html"><![CDATA[<p>本文章是在 vue-cli 脚手架中引入 elementUI 的,请先创建一个脚手架再实行以下步骤。</p><h3 id="1-下载-elementUI-框架"><a href="#1-下载-elementUI-框架" class="headerlink" title="1.下载 elementUI 框架"></a>1.下载 elementUI 框架</h3><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i element-ui -S<br></code></pre></div></td></tr></table></figure><h3 id="2-引入-Element"><a href="#2-引入-Element" class="headerlink" title="2.引入 Element"></a>2.引入 Element</h3><p>你可以引入整个 Element，或是根据需要仅引入部分组件。我引入的是完整的 Element。按需引入请自行去官网查阅。<br>完整引入<br>在 <code>main.js</code> 中写入以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// The Vue build version to load with the `import` command</span><br><span class="hljs-comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><br><span class="hljs-comment">// 引入element框架</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-ui&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">/* eslint-disable no-new */</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>  router,<br>  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">App</span> &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;App/&gt;&quot;</span>,<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>以上代码便完成了 <code>Element</code> 的引入。需要注意的是，样式文件需要单独引入。</p><p>3.验证<code>elementUI</code>框架是否引入成功</p><p>在<code>components</code>文件夹下插入<code>elementUI</code>框架样式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="/./images/1541474252210-a58efad5-19a5-474f-a442-d167129111d6.jpeg" alt="vue引入elementUI框架"></p><p>4.启动项目<br><code>npm run dev</code></p><p>浏览器打开网址<code>http://localhost:8080</code>,显示按钮如下</p><p>证明引入成功</p><p><img src="/./images/1541474476111-2890bba1-d879-4b12-93a1-1925d90c2dcb.jpeg" alt="vue引入elementUI框架"></p>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#Vue.js</tag>
      
      <tag>#前端</tag>
      
      <tag>#ElementUI</tag>
      
      <tag>#Vue-cli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git命令总结</title>
    <link href="/2022/03/08/article-10/"/>
    <url>/2022/03/08/article-10/</url>
    
    <content type="html"><![CDATA[<p>创建本地仓库</p><p>mkdir 创库名字<br>cd 仓库名字</p><p>pwd #查看仓库路径</p><p>git init #把目录变成 Git 可以管理的仓库</p><h3 id="1-创建一个-git-版本库"><a href="#1-创建一个-git-版本库" class="headerlink" title="1.创建一个 git 版本库"></a>1.创建一个 git 版本库</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> github<br><span class="hljs-built_in">cd</span> github<br><span class="hljs-built_in">pwd</span><br>/f/github<br></code></pre></div></td></tr></table></figure><p>Mkdir 是新建一个文件夹（github）<br>cd 进入 github 目录<br>pwd 命令用于显示当前目录。在我的电脑上，这个仓库位于&#x2F;f&#x2F;github。</p><p>通过 git init 命令把这个目录变成 Git 可以管理的仓库：</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></div></td></tr></table></figure><p>瞬间 Git 就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git 的目录，这个目录是 Git 来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把 Git 仓库给破坏了。<br>如果你没有看到.git 目录，那是因为这个目录默认是隐藏的，用 ls -ah 命令就可以看见。</p><h3 id="2-上传项目到-github"><a href="#2-上传项目到-github" class="headerlink" title="2.上传项目到 github"></a>2.上传项目到 github</h3><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-meta">#1.上传到工作区</span><br>git <span class="hljs-keyword">add</span> .<br><span class="hljs-meta">#2.填写更新信息</span><br>git commit -m ‘配置管理’<br><span class="hljs-meta">#3.拉取GitHub源代码</span><br>git pull<br><span class="hljs-meta">#4. 上传项目</span><br>git <span class="hljs-keyword">push</span><br></code></pre></div></td></tr></table></figure><h3 id="3-分支命令"><a href="#3-分支命令" class="headerlink" title="3.分支命令"></a>3.分支命令</h3><h4 id="1-查看分支："><a href="#1-查看分支：" class="headerlink" title="1.查看分支："></a>1.查看分支：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span> <span class="hljs-comment"># 查看本地分支</span><br>git <span class="hljs-keyword">branch </span>-r  <span class="hljs-comment"># 查看远程分支</span><br></code></pre></div></td></tr></table></figure><h4 id="2-创建分支："><a href="#2-创建分支：" class="headerlink" title="2.创建分支："></a>2.创建分支：</h4><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">git branch &lt;<span class="hljs-built_in">name</span>&gt;<br></code></pre></div></td></tr></table></figure><h4 id="3-切换分支："><a href="#3-切换分支：" class="headerlink" title="3.切换分支："></a>3.切换分支：</h4><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">git checkout &lt;<span class="hljs-built_in">name</span>&gt;<br></code></pre></div></td></tr></table></figure><h4 id="4-创建-切换分支："><a href="#4-创建-切换分支：" class="headerlink" title="4.创建+切换分支："></a>4.创建+切换分支：</h4><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">git checkout -b &lt;<span class="hljs-built_in">name</span>&gt;<br></code></pre></div></td></tr></table></figure><h4 id="5-创建本地分支并拉取远程分支："><a href="#5-创建本地分支并拉取远程分支：" class="headerlink" title="5.创建本地分支并拉取远程分支："></a>5.创建本地分支并拉取远程分支：</h4><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> 本地分支名 origin/远程分支名<br></code></pre></div></td></tr></table></figure><h4 id="6-如果-5-命令行执行失败，则执行此命令更新远程然后再执行-5-命令行："><a href="#6-如果-5-命令行执行失败，则执行此命令更新远程然后再执行-5-命令行：" class="headerlink" title="6.如果 5 命令行执行失败，则执行此命令更新远程然后再执行 5 命令行："></a>6.如果 5 命令行执行失败，则执行此命令更新远程然后再执行 5 命令行：</h4><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">git fetch</span><br></code></pre></div></td></tr></table></figure><h4 id="7-本地分支和远程分支关联："><a href="#7-本地分支和远程分支关联：" class="headerlink" title="7.本地分支和远程分支关联："></a>7.本地分支和远程分支关联：</h4><figure class="highlight q"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs q">git branch --<span class="hljs-built_in">set</span>-upstream-to=origin/<span class="hljs-built_in">dev</span> <span class="hljs-built_in">dev</span><br></code></pre></div></td></tr></table></figure><h4 id="8-合并某分支到当前分支："><a href="#8-合并某分支到当前分支：" class="headerlink" title="8.合并某分支到当前分支："></a>8.合并某分支到当前分支：</h4><figure class="highlight fortran"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fortran">git <span class="hljs-built_in">merge</span> &lt;<span class="hljs-keyword">name</span>&gt;<br></code></pre></div></td></tr></table></figure><h4 id="9-删除分支："><a href="#9-删除分支：" class="headerlink" title="9.删除分支："></a>9.删除分支：</h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git branch -D &lt;name&gt; <span class="hljs-regexp">//</span> 删除本地分支<br>git push origin :&lt;name&gt;   <span class="hljs-regexp">//</span> 删除远程分支<br><span class="hljs-regexp">//</span> 刚提交到远程的test将被删除，但是本地还会保存的，不用担心<br></code></pre></div></td></tr></table></figure><h4 id="10-查看仓库地址"><a href="#10-查看仓库地址" class="headerlink" title="10.查看仓库地址"></a>10.查看仓库地址</h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git remote -v  <span class="hljs-regexp">//</span> 查看链接的远程仓库地址<br></code></pre></div></td></tr></table></figure><h4 id="11-跳过代码检查"><a href="#11-跳过代码检查" class="headerlink" title="11.跳过代码检查"></a>11.跳过代码检查</h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git commit -m <span class="hljs-string">&quot;注释&quot;</span> -n <span class="hljs-regexp">//</span> 跳过代码检查，避免因为钩子无法提交代码<br></code></pre></div></td></tr></table></figure><p><code>git status</code>命令用于显示工作目录和暂存区的状态。使用此命令能看到那些修改被暂存到了, 哪些没有, 哪些文件没有被 Git tracked 到。git status 不显示已经 commit 到项目历史中去的信息。看项目历史的信息要使用 git log.</p><h3 id="4-本地其他分支合并上传到远程主分支"><a href="#4-本地其他分支合并上传到远程主分支" class="headerlink" title="4.本地其他分支合并上传到远程主分支"></a>4.本地其他分支合并上传到远程主分支</h3><p>以下操作是开发环境在本地分支开始的 1.代码上传到工作区： <code>git add .</code> 2.填写更新信息：<code>git commit -m &#39;发布新建与编辑功能&#39;</code> 3.切换到主分支：<code>git checkout master</code> 4.合并分支到主分支：<code>git merge dev</code> 5.拉取代码：<code>git pull</code> 6.上传代码: <code>git push</code></p><h3 id="5-本地分支上传到远程分支"><a href="#5-本地分支上传到远程分支" class="headerlink" title="5.本地分支上传到远程分支"></a>5.本地分支上传到远程分支</h3><p>如果想把本地的某个分支 test 提交到远程仓库，并作为远程仓库的 master 分支，或者作为另外一个名叫 test 的分支，那么可以这么做。</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">git <span class="hljs-keyword">push</span> origin <span class="hljs-keyword">test</span>:master         // 提交本地<span class="hljs-keyword">test</span>分支作为远程的master分支 //好像只写这一句，远程的github就会自动创建一个<span class="hljs-keyword">test</span>分支<br>git <span class="hljs-keyword">push</span> origin <span class="hljs-keyword">test</span>:<span class="hljs-keyword">test</span>              // 提交本地<span class="hljs-keyword">test</span>分支作为远程的<span class="hljs-keyword">test</span>分支<br></code></pre></div></td></tr></table></figure><p>如果想删除远程的分支呢？类似于上面，如果:左边的分支为空，那么将删除:右边的远程的分支。</p><figure class="highlight x86asm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs x86asm">git <span class="hljs-keyword">push</span> origin :<span class="hljs-keyword">test</span>              // 刚提交到远程的<span class="hljs-keyword">test</span>将被删除，但是本地还会保存的，不用担心<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#前端</tag>
      
      <tag>#Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18个杀手级JavaScript单行代码</title>
    <link href="/2022/03/08/article-9/"/>
    <url>/2022/03/08/article-9/</url>
    
    <content type="html"><![CDATA[<h3 id="1、复制到剪贴板"><a href="#1、复制到剪贴板" class="headerlink" title="1、复制到剪贴板"></a>1、复制到剪贴板</h3><p>使用 navigator.clipboard.writeText 轻松将任何文本复制到剪贴板。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">copyToClipboard</span> = (<span class="hljs-params">text</span>) =&gt; navigator.<span class="hljs-property">clipboard</span>.<span class="hljs-title function_">writeText</span>(text);<br><span class="hljs-title function_">copyToClipboard</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="2、检查日期是否有效"><a href="#2、检查日期是否有效" class="headerlink" title="2、检查日期是否有效"></a>2、检查日期是否有效</h3><p>使用以下代码段检查给定日期是否有效。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">isDateValid</span> = (<span class="hljs-params">...val</span>) =&gt; !<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(...val).<span class="hljs-title function_">valueOf</span>());<br><span class="hljs-title function_">isDateValid</span>(<span class="hljs-string">&quot;December 17, 1995 03:24:00&quot;</span>);<br><span class="hljs-comment">// Result: true</span><br></code></pre></div></td></tr></table></figure><h3 id="3、找出一年中的哪一天"><a href="#3、找出一年中的哪一天" class="headerlink" title="3、找出一年中的哪一天"></a>3、找出一年中的哪一天</h3><p>查找给定日期的哪一天。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">dayOfYear</span> = (<span class="hljs-params">date</span>) =&gt;<br>  <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((date - <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(date.<span class="hljs-title function_">getFullYear</span>(), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>);<br><span class="hljs-title function_">dayOfYear</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><span class="hljs-comment">// Result: 272</span><br></code></pre></div></td></tr></table></figure><h3 id="4、将首字符串大写"><a href="#4、将首字符串大写" class="headerlink" title="4、将首字符串大写"></a>4、将首字符串大写</h3><p>Javascript 没有内置的大写函数，因此我们可以使用以下代码。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">capitalize</span> = str =&gt; str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<span class="hljs-title function_">capitalize</span>(<span class="hljs-string">&quot;follow for more&quot;</span>)<span class="hljs-comment">// Result: Follow for more</span><br></code></pre></div></td></tr></table></figure><h3 id="5、找出两日期之间的天数"><a href="#5、找出两日期之间的天数" class="headerlink" title="5、找出两日期之间的天数"></a>5、找出两日期之间的天数</h3><p>使用以下代码段查找给定 2 个日期之间的天数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">dayDif</span> = (<span class="hljs-params">date1, date2</span>) =&gt; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(date1.<span class="hljs-title function_">getTime</span>() - date2.<span class="hljs-title function_">getTime</span>()) / <span class="hljs-number">86400000</span>)<span class="hljs-title function_">dayDif</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2020-10-21&quot;</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2021-10-22&quot;</span>))<span class="hljs-comment">// Result: 366</span><br></code></pre></div></td></tr></table></figure><h3 id="6、清除所有-Cookie"><a href="#6、清除所有-Cookie" class="headerlink" title="6、清除所有 Cookie"></a>6、清除所有 Cookie</h3><p>你可以通过使用 document.cookie 访问 cookie 并清除它来轻松清除存储在网页中的所有 cookie。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> clearCookies = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span><br>  .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>)<br>  .<span class="hljs-title function_">forEach</span>(<br>    <span class="hljs-function">(<span class="hljs-params">cookie</span>) =&gt;</span><br>      (<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = cookie<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^ +/</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/=._/</span>, <span class="hljs-string">`=;expires=<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">0</span>).toUTCString()&#125;</span>; path=/`</span>))<br>  );<br></code></pre></div></td></tr></table></figure><h3 id="7、生成随机十六进制"><a href="#7、生成随机十六进制" class="headerlink" title="7、生成随机十六进制"></a>7、生成随机十六进制</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">你可以使用 <span class="hljs-title class_">Math</span>.<span class="hljs-property">random</span> 和 padEnd 属性生成随机十六进制颜色。<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">randomHex</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-string">`#<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() _ <span class="hljs-number">0xffffff</span>).toString(<span class="hljs-number">16</span>).padEnd(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;0&quot;</span>)&#125;</span>`</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">randomHex</span>());<br><span class="hljs-comment">//Result: #92b008</span><br></code></pre></div></td></tr></table></figure><h3 id="8、从数组中删除重复项"><a href="#8、从数组中删除重复项" class="headerlink" title="8、从数组中删除重复项"></a>8、从数组中删除重复项</h3><p>你可以使用 JavaScript 中的 Set 轻松删除重复项。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">removeDuplicates</span> = (<span class="hljs-params">arr</span>) =&gt; [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">removeDuplicates</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]));<br><span class="hljs-comment">// Result: [ 1, 2, 3, 4, 5, 6 ]</span><br></code></pre></div></td></tr></table></figure><h3 id="9、从-URL-获取查询参数"><a href="#9、从-URL-获取查询参数" class="headerlink" title="9、从 URL 获取查询参数"></a>9、从 URL 获取查询参数</h3><p>你可以通过传递 window.location 或原始 URL goole.com?search&#x3D;easy&amp;page&#x3D;3 从 url 轻松检索查询参数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getParameters</span> = (<span class="hljs-params">URL</span>) =&gt; &#123;<br>  <span class="hljs-variable constant_">URL</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<br>    <span class="hljs-string">&#x27;&#123;&quot;&#x27;</span> +<br>      <span class="hljs-built_in">decodeURI</span>(<span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;?&quot;</span>)[<span class="hljs-number">1</span>])<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&quot;,&quot;&#x27;</span>)<br>        .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/=/g</span>, <span class="hljs-string">&#x27;&quot;:&quot;&#x27;</span>) +<br>      <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br>  );<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-variable constant_">URL</span>);<br>&#125;;<br><span class="hljs-title function_">getParameters</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>); <span class="hljs-comment">// Result: &#123; search : &quot;easy&quot;, page : 3 &#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="10、从日期记录时间"><a href="#10、从日期记录时间" class="headerlink" title="10、从日期记录时间"></a>10、从日期记录时间</h3><p>我们可以从给定日期以小时::分钟::秒的格式记录时间。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">timeFromDate</span> = (<span class="hljs-params">date</span>) =&gt; date.<span class="hljs-title function_">toTimeString</span>().<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">timeFromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2021</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">17</span>, <span class="hljs-number">30</span>, <span class="hljs-number">0</span>)));<br><span class="hljs-comment">// Result: &quot;17:30:00&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="11、检查数字是偶数还是奇数"><a href="#11、检查数字是偶数还是奇数" class="headerlink" title="11、检查数字是偶数还是奇数"></a>11、检查数字是偶数还是奇数</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">isEven</span> = (<span class="hljs-params">num</span>) =&gt; num % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isEven</span>(<span class="hljs-number">2</span>));<br><span class="hljs-comment">// Result: True</span><br></code></pre></div></td></tr></table></figure><h3 id="12、求数字的平均值"><a href="#12、求数字的平均值" class="headerlink" title="12、求数字的平均值"></a>12、求数字的平均值</h3><p>使用 reduce 方法找到多个数字之间的平均值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">average</span> = (<span class="hljs-params">...args</span>) =&gt; args.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b) / args.<span class="hljs-property">length</span>;<br><span class="hljs-title function_">average</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><span class="hljs-comment">// Result: 2.5</span><br></code></pre></div></td></tr></table></figure><h3 id="13、反转字符串"><a href="#13、反转字符串" class="headerlink" title="13、反转字符串"></a>13、反转字符串</h3><p>你可以使用 split、reverse 和 join 方法轻松反转字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">reverse</span> = (<span class="hljs-params">str</span>) =&gt; str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-title function_">reverse</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-comment">// Result: &#x27;dlrow olleh&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="14、检查数组是否为空"><a href="#14、检查数组是否为空" class="headerlink" title="14、检查数组是否为空"></a>14、检查数组是否为空</h3><p>检查数组是否为空的简单单行程序将返回 true 或 false。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">isNotEmpty</span> = (<span class="hljs-params">arr</span>) =&gt; <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr) &amp;&amp; arr.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>;<br><span class="hljs-title function_">isNotEmpty</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><span class="hljs-comment">// Result: true</span><br></code></pre></div></td></tr></table></figure><h3 id="15、获取选定的文本"><a href="#15、获取选定的文本" class="headerlink" title="15、获取选定的文本"></a>15、获取选定的文本</h3><p>使用内置的 getSelectionproperty 获取用户选择的文本。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getSelectedText</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">getSelection</span>().<span class="hljs-title function_">toString</span>();<br><span class="hljs-title function_">getSelectedText</span>();<br></code></pre></div></td></tr></table></figure><h3 id="16、打乱数组"><a href="#16、打乱数组" class="headerlink" title="16、打乱数组"></a>16、打乱数组</h3><p>使用 sort 和 random 方法打乱数组非常容易。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">shuffleArray</span> = (<span class="hljs-params">arr</span>) =&gt; arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-number">0.5</span> - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">shuffleArray</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])); <span class="hljs-comment">// Result: [ 1, 4, 3, 2 ]</span><br></code></pre></div></td></tr></table></figure><h3 id="17、检测暗模式"><a href="#17、检测暗模式" class="headerlink" title="17、检测暗模式"></a>17、检测暗模式</h3><p>使用以下代码检查用户的设备是否处于暗模式。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> isDarkMode =<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">matchMedia</span> &amp;&amp;<br>  <span class="hljs-variable language_">window</span><br>    .<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span>)<br>    .<span class="hljs-property">matchesconsole</span>.<span class="hljs-title function_">log</span>(isDarkMode); <span class="hljs-comment">// Result: True or False</span><br></code></pre></div></td></tr></table></figure><h3 id="18、将-RGB-转换为十六进制"><a href="#18、将-RGB-转换为十六进制" class="headerlink" title="18、将 RGB 转换为十六进制"></a>18、将 RGB 转换为十六进制</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">rgbToHex</span> = (<span class="hljs-params">r, g, b</span>) =&gt;   <span class="hljs-string">&quot;#&quot;</span> + ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span>) + (r &lt;&lt; <span class="hljs-number">16</span>) + (g &lt;&lt; <span class="hljs-number">8</span>) + b).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<span class="hljs-title function_">rgbToHex</span>(<span class="hljs-number">0</span>, <span class="hljs-number">51</span>, <span class="hljs-number">255</span>); <span class="hljs-comment">// Result: #0033ff</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#前端</tag>
      
      <tag>#JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24个 JavaScript 循环遍历方法，你都知道吗？</title>
    <link href="/2022/03/08/article-8/"/>
    <url>/2022/03/08/article-8/</url>
    
    <content type="html"><![CDATA[<p class="note note-success">今天我们来看点基础知识，看看 JavaScript 中的那些循环遍历方法：<p><span id="more"></span><p><img src="/./images/733F5E1A-DEA6-481d-8F45-9BC79A7A8D12.png" alt="js遍历方法"></p><h2 id="一、数组遍历方法"><a href="#一、数组遍历方法" class="headerlink" title="一、数组遍历方法"></a>一、数组遍历方法</h2><h3 id="1-forEach"><a href="#1-forEach" class="headerlink" title="1. forEach()"></a>1. forEach()</h3><p>forEach 方法用于调用数组的每个元素，并将元素传递给回调函数。数组中的每个值都会调用回调函数。其语法如下：<br><code>array.forEach(function(currentValue, index, arr), thisValue)</code></p><p>该方法的第一个参数为回调函数，是必传的，它有三个参数：</p><ul><li>currentValue：必需。当前元素</li><li>index：可选。当前元素的索引值。</li><li>arr：可选。当前元素所属的数组对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index+<span class="hljs-string">&quot;:&quot;</span>+item)<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>该方法还可以有第二个参数，用来绑定回调函数内部 this 变量（前提是回调函数不能是箭头函数，因为箭头函数没有 this）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>[index])  <span class="hljs-comment">//  9 8 7 6 5</span><br>&#125;, arr1)<br></code></pre></div></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>forEach 方法不会改变原数组，也没有返回值；</li><li>forEach 无法使用 break，continue 跳出循环，使用 return 时，效果和在 for 循环中使用 continue 一致；</li><li>forEach 方法无法遍历对象，仅适用于数组的遍历。</li></ul><h3 id="2-map"><a href="#2-map" class="headerlink" title="2. map()"></a>2. map()</h3><p><code>map()</code> 方法会返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。该方法按照原始数组元素顺序依次处理元素。其语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">array.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">currentValue,index,arr</span>), thisValue)<br></code></pre></div></td></tr></table></figure><p>该方法的第一个参数为回调函数，是必传的，它有三个参数：</p><ul><li>currentValue：必须。当前元素的值；</li><li>index：可选。当前元素的索引值；</li><li>arr：可选。当前元素属于的数组对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> item + <span class="hljs-number">1</span>;<br>&#125;)<br><br><span class="hljs-comment">// 输出结果： [2, 3, 4]</span><br></code></pre></div></td></tr></table></figure><p>该方法的第二个参数用来绑定参数函数内部的 this 变量，是可选的：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>].<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>[e];<br>&#125;, arr)<br><br><span class="hljs-comment">// 输出结果： [&#x27;b&#x27;, &#x27;c&#x27;]</span><br></code></pre></div></td></tr></table></figure><p>该方法还可以进行链式调用：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br>arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item + <span class="hljs-number">1</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item + <span class="hljs-number">1</span>)<br><br><span class="hljs-comment">// 输出结果： [3, 4, 5]</span><br></code></pre></div></td></tr></table></figure><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><ul><li>map 方法不会对空数组进行检测；</li><li>map 方法遍历数组时会返回一个新数组，不会改变原始数组；</li><li>map 方法有返回值，可以 return 出来，map 的回调函数中支持 return 返回值；<br>*map 方法无法遍历对象，仅适用于数组的遍历。</li></ul><h3 id="3-for-of"><a href="#3-for-of" class="headerlink" title="3. for of"></a>3. for of</h3><p>for…of 语句创建一个循环来迭代可迭代的对象。在 ES6 中引入的 <code>for...of</code> 循环，以替代 <code>for...in</code> 和 <code>forEach()</code> ，并支持新的迭代协议。其语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">for</span> (variable <span class="hljs-keyword">of</span> iterable) &#123;<br>    statement<br>&#125;<br></code></pre></div></td></tr></table></figure><p>该方法有两个参数：</p><ul><li><code>variable</code>：每个迭代的属性值被分配给该变量。</li><li><code>iterable</code>：一个具有可枚举属性并且可以迭代的对象。</li></ul><p>该方法可以获取数组的每一项：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<br>    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;hello&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>, <span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;world&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">3</span>, <span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;JavaScript&#x27;</span>&#125;<br>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// 输出结果：&#123;id:1, value:&#x27;hello&#x27;&#125;  &#123;id:2, value:&#x27;world&#x27;&#125; &#123;id:3, value:&#x27;JavaScript&#x27;&#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h4><ul><li>for of 方法只会遍历当前对象的属性，不会遍历其原型链上的属性；</li><li>for of 方法适用遍历 数组&#x2F; 类数组&#x2F;字符串&#x2F;map&#x2F;set 等拥有迭代器对象的集合；</li><li>for of 方法不支持遍历普通对象，因为其没有迭代器对象。如果想要遍历一个对象的属性，可以用 for in 方法；<br>可以使用<code>break</code>、<code>continue</code>、<code>return</code>来中断循环遍历；</li></ul><h3 id="4-filter"><a href="#4-filter" class="headerlink" title="4. filter()"></a>4. filter()</h3><p><code>filter()</code>方法用于过滤数组，满足条件的元素会被返回。它的参数是一个回调函数，所有数组元素依次执行该函数，返回结果为 <code>true</code> 的元素会被返回，如果没有符合条件的元素，则返回空数组。其语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">array.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">currentValue,index,arr</span>), thisValue)<br></code></pre></div></td></tr></table></figure><p>该方法的第一个参数为回调函数，是必传的，它有三个参数：</p><ul><li><code>currentValue</code>：必须。当前元素的值；</li><li><code>index</code>：可选。当前元素的索引值；</li><li><code>arr</code>：可选。当前元素属于的数组对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">2</span>)<br><br><span class="hljs-comment">// 输出结果：[3, 4, 5]</span><br></code></pre></div></td></tr></table></figure><p>同样，它也有第二个参数，用来绑定参数函数内部的 this 变量。<br>可以使用<code>filter()</code>方法来移除数组中的<code>undefined</code>、<code>null</code>、<code>NAN</code>等值：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-number">2</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>]<br>arr.<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>)<br><br><span class="hljs-comment">// 输出结果：[1, 2, 3, 4]</span><br></code></pre></div></td></tr></table></figure><h4 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h4><ul><li>filter 方法会返回一个新的数组，不会改变原数组；</li><li>filter 方法不会对空数组进行检测；</li><li>filter 方法仅适用于检测数组。</li></ul><h3 id="5-some-、every"><a href="#5-some-、every" class="headerlink" title="5. some()、every()"></a>5. some()、every()</h3><p><code>some()</code> 方法会对数组中的每一项进行遍历，只要有一个元素符合条件，就返回 true，且剩余的元素不会再进行检测，否则就返回 false。<br>​<br><code>every()</code> 方法会对数组中的每一项进行遍历，只有所有元素都符合条件时，才返回 true，如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。其语法如下：<br>​<br>两者的语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">array.<span class="hljs-title function_">some</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">currentValue,index,arr</span>),thisValue)<br>array.<span class="hljs-title function_">every</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">currentValue,index,arr</span>), thisValue)<br></code></pre></div></td></tr></table></figure><p>两个方法的第一个参数为回调函数，是必传的，它有三个参数：</p><ul><li><code>currentValue</code>：必须。当前元素的值；</li><li><code>index</code>：可选。当前元素的索引值；</li><li><code>arr</code>：可选。当前元素属于的数组对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">4</span>)<br><br><span class="hljs-comment">// 输出结果： true</span><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// 输出结果： true</span><br></code></pre></div></td></tr></table></figure><h4 id="注意：-4"><a href="#注意：-4" class="headerlink" title="注意："></a>注意：</h4><ul><li>两个方法都不会改变原数组，会返回一个布尔值；</li><li>两个方法都不会对空数组进行检测；</li><li>两个方法都仅适用于检测数组。</li></ul><h3 id="6-reduce-、reduceRight"><a href="#6-reduce-、reduceRight" class="headerlink" title="6. reduce()、reduceRight()"></a>6. <code>reduce()</code>、<code>reduceRight()</code></h3><p><code>reduce()</code> 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><p><code>reduce()</code> 可以作为一个高阶函数，用于函数的 compose。其语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">array.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">total, currentValue, currentIndex, arr</span>), initialValue)<br></code></pre></div></td></tr></table></figure><p><code>reduce</code> 方法会为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，回调函数接受四个参数：</p><ul><li>total：上一次调用回调返回的值，或者是提供的初始值（initialValue）；</li><li>currentValue：当前被处理的元素；</li><li>currentIndex：当前元素的索引；</li><li>arr：当前元素所属的数组对象。</li></ul><p>该方法的第二个参数是 <code>initialValue</code>，表示传递给函数的初始值 （作为第一次调用 callback 的第一个参数）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">let</span> sum = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prev, cur, index);<br>    <span class="hljs-keyword">return</span> prev + cur;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr, sum);<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">输出结果：<br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-number">6</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><p>再来加一个初始值试试：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">let</span> sum = arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prev, cur, index);<br>    <span class="hljs-keyword">return</span> prev + cur;<br>&#125;, <span class="hljs-number">5</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr, sum);<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-number">8</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-number">11</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <span class="hljs-number">15</span><br></code></pre></div></td></tr></table></figure><p>由此可以得出结论：<span style='color:#5cb85c'>[ 如果没有提供初始值 initialValue，reduce 会从索引 1 的地方开始执行 callback 方法，跳过第一个索引。如果提供了初始值 initialValue，从索引 0 开始执行 ]</span><br>​<br><code>reduceRight()</code> 方法和的<code>reduce()</code>用法几乎一致，只是该方法是对数组进行倒序遍历的，而<code>reduce()</code>方法是正序遍历的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">let</span> sum = arr.<span class="hljs-title function_">reduceRight</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur, index, arr</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prev, cur, index);<br>    <span class="hljs-keyword">return</span> prev + cur;<br>&#125;, <span class="hljs-number">5</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr, sum);<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-number">9</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-number">12</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-number">14</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <span class="hljs-number">15</span><br></code></pre></div></td></tr></table></figure><h4 id="注意：-5"><a href="#注意：-5" class="headerlink" title="注意："></a>注意：</h4><ul><li>两个方法都不会改变原数组；</li><li>两个方法如果添加初始值，就会改变原数组，会将这个初始值放在数组的最后一位；</li><li>两个方法对于空数组是不会执行回调函数的。</li></ul><h3 id="7-find-、findIndex"><a href="#7-find-、findIndex" class="headerlink" title="7. find()、findIndex()"></a>7. find()、findIndex()</h3><p><code>find()</code> 方法返回通过函数内判断的数组的第一个元素的值。当数组中的元素在测试条件时返回 <code>true</code> 时， <code>find()</code> 返回符合条件的元素，之后的值不会再调用执行函数。如果没有符合条件的元素返回 <code>undefined</code>。<br>​<br><code>findIndex()</code> 方法返回传入一个测试函数符合条件的数组第一个元素位置（索引）。当数组中的元素在函数条件时返回 <code>true</code> 时， <code>findIndex()</code> 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。如果没有符合条件的元素返回 -1。<br>​<br>两个方法的语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">array.<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">currentValue, index, arr</span>),thisValue)<br>array.<span class="hljs-title function_">findIndex</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">currentValue, index, arr</span>), thisValue)<br></code></pre></div></td></tr></table></figure><p>两个方法的第一个参数为回调函数，是必传的，它有三个参数：</p><ul><li><code>currentValue</code>：必需。当前元素；</li><li><code>index</code>：可选。当前元素的索引；</li><li><code>arr</code>：可选。当前元素所属的数组对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">2</span>)<br><br><span class="hljs-comment">// 输出结果： 3</span><br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>arr.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; <span class="hljs-number">2</span>)<br><br><span class="hljs-comment">// 输出结果： 2</span><br></code></pre></div></td></tr></table></figure><p><code>find()</code>和<code>findIndex()</code>两个方法几乎一样，只是返回结果不同：</p><p><code>find()</code>：返回的是第一个符合条件的值；<br><code>findIndex</code>：返回的是第一个返回条件的值的索引值。</p><h4 id="注意：-6"><a href="#注意：-6" class="headerlink" title="注意："></a>注意：</h4><ul><li>两个方法对于空数组，函数是不会执行的；</li><li>两个方法否不会改变原数组。</li></ul><h3 id="8-keys-、values-、entries"><a href="#8-keys-、values-、entries" class="headerlink" title="8. keys()、values()、entries()"></a>8. keys()、values()、entries()</h3><p>三个方法都返回一个数组的迭代对象，对象的内容不太相同：</p><ul><li><code>keys()</code> 返回数组的索引值；</li><li><code>values()</code> 返回数组的元素；</li><li><code>entries()</code> 返回数组的键值对。</li></ul><p>三个方法的语法如下：</p><ul><li><code>array.keys()</code></li><li><code>array.values()</code></li><li><code>array.entries()</code></li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">这三个方法都没有参数：<br><br>```<span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> iterator1 = arr.<span class="hljs-title function_">keys</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> iterator2 = arr.<span class="hljs-title function_">values</span>()</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> iterator3 = arr.<span class="hljs-title function_">entries</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> iterator1) &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 输出结果： 0 1 2 3</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> iterator2) &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 输出结果： Banana Orange Apple Mango</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> iterator3) &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// 输出结果：[0, &#x27;Banana&#x27;] [1, &#x27;Orange&#x27;] [2, &#x27;Apple&#x27;] [3, &#x27;Mango&#x27;]</span></span><br></code></pre></div></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><table><thead><tr><th align="left"><span style='color:#5cb85c'>方法</span></th><th align="center"><span style='color:#5cb85c'>是否改变原数组</span></th><th align="left"><span style='color:#5cb85c'>特点</span></th></tr></thead><tbody><tr><td align="left"><code>forEach()</code></td><td align="center">否</td><td align="left">没有返回值</td></tr><tr><td align="left"><code>map()</code></td><td align="center">否</td><td align="left">有返回值，可链式调用</td></tr><tr><td align="left"><code>for of</code></td><td align="center">否</td><td align="left"><code>for...of</code> 遍历具有 Iterator 迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的 obj 对象，将异步循环变成同步循环</td></tr><tr><td align="left"><code>filter()</code></td><td align="center">否</td><td align="left">过滤数组，返回包含符合条件的元素的数组，可链式调用</td></tr><tr><td align="left"><code>every()</code>、<code>some()</code></td><td align="center">否</td><td align="left">some()只要有一个是 true，便返回 true；而 every()只要有一个是 false，便返回 false.</td></tr><tr><td align="left"><code>find()</code>、<code>findIndex()</code></td><td align="center">否</td><td align="left">find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值</td></tr><tr><td align="left"><code>reduce()</code>、<code>reduceRight()</code></td><td align="center">否</td><td align="left">reduce()对数组正序操作；reduceRight()对数组逆序操作</td></tr><tr><td align="left"><code>keys()</code>、<code>values()</code>、<code>entries()</code></td><td align="center">否</td><td align="left">keys() 返回数组的索引值；values() 返回数组元素；entries() 返回数组的键值对。</td></tr></tbody></table><h2 id="二、对象遍历方法"><a href="#二、对象遍历方法" class="headerlink" title="二、对象遍历方法"></a>二、对象遍历方法</h2><h3 id="1-for-in"><a href="#1-for-in" class="headerlink" title="1. for in"></a>1. for in</h3><p><code>for…in</code> 主要用于循环对象属性。循环中的代码每执行一次，就会对对象的属性进行一次操作。其语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> <span class="hljs-keyword">in</span> object) &#123;<br> 执行的代码块<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中两个参数：</p><ul><li><code>var</code>：必须。指定的变量可以是数组元素，也可以是对象的属性。</li><li><code>object</code>：必须。指定迭代的的对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;键名：&#x27;</span>, i);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;键值：&#x27;</span>, obj[i]);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">输出结果：<br>键名： a<br>键值： <span class="hljs-number">1</span><br>键名： b<br>键值： <span class="hljs-number">2</span><br>键名： c<br>键值： <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><h4 id="注意：-7"><a href="#注意：-7" class="headerlink" title="注意："></a>注意：</h4><p><code>for in</code> 方法不仅会遍历当前的对象所有的可枚举属性，还会遍历其原型链上的属性。</p><h3 id="2-Object-keys-、Object-values-、Object-entries"><a href="#2-Object-keys-、Object-values-、Object-entries" class="headerlink" title="2. Object.keys()、Object.values()、Object.entries()"></a>2. Object.keys()、Object.values()、Object.entries()</h3><p>这三个方法都用来遍历对象，它会返回一个由给定对象的自身可枚举属性（不含继承的和 <code>Symbol</code> 属性）组成的数组，数组元素的排列顺序和正常循环遍历该对象时返回的顺序一致，这个三个元素返回的值分别如下：</p><ul><li><code>Object.keys()</code>：返回包含对象键名的数组；</li><li><code>Object.values()</code>：返回包含对象键值的数组；</li><li><code>Object.entries()</code>：返回包含对象键名和键值的数组。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj));   <span class="hljs-comment">// 输出结果: [&#x27;id&#x27;, &#x27;name&#x27;, &#x27;age&#x27;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(obj)); <span class="hljs-comment">// 输出结果: [1, &#x27;hello&#x27;, 18]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj));   <span class="hljs-comment">// 输出结果: [[&#x27;id&#x27;, 1], [&#x27;name&#x27;, &#x27;hello&#x27;], [&#x27;age&#x27;, 18]</span><br></code></pre></div></td></tr></table></figure><h4 id="注意：-8"><a href="#注意：-8" class="headerlink" title="注意："></a>注意：</h4><p><code>Object.keys()</code>方法返回的数组中的值都是字符串，也就是说不是字符串的 key 值会转化为字符串。<br>结果数组中的属性值都是对象本身可枚举的属性，不包括继承来的属性。</p><h3 id="3-Object-getOwnPropertyNames"><a href="#3-Object-getOwnPropertyNames" class="headerlink" title="3. Object.getOwnPropertyNames()"></a>3. Object.getOwnPropertyNames()</h3><p><code>Object.getOwnPropertyNames()</code>方法与<code>Object.keys()</code>类似，也是接受一个对象作为参数，返回一个数组，包含了该对象自身的所有属性名。但它能返回 <span style='color:blue'>[不可枚举的属性]</span>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> a = [<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&#x27;World&#x27;</span>];<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(a) <span class="hljs-comment">// [&quot;0&quot;, &quot;1&quot;]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(a) <span class="hljs-comment">// [&quot;0&quot;, &quot;1&quot;, &quot;length&quot;]</span><br></code></pre></div></td></tr></table></figure><p>这两个方法都可以用来计算对象中属性的个数：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-number">0</span>: <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&quot;c&quot;</span>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj) <span class="hljs-comment">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-property">length</span> <span class="hljs-comment">// 3</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj).<span class="hljs-property">length</span> <span class="hljs-comment">// 3</span><br></code></pre></div></td></tr></table></figure><h3 id="4-Object-getOwnPropertySymbols"><a href="#4-Object-getOwnPropertySymbols" class="headerlink" title="4. Object.getOwnPropertySymbols()"></a>4. Object.getOwnPropertySymbols()</h3><p><code>Object.getOwnPropertySymbols()</code> 方法返回对象自身的 <code>Symbol</code> 属性组成的数组，不包括字符串属性：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-comment">// 给对象添加一个不可枚举的 Symbol 属性</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(obj, &#123;<br> [<span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;baz&#x27;</span>)]: &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Symbol baz&#x27;</span>,<br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span><br> &#125;<br>&#125;)<br><br><span class="hljs-comment">// 给对象添加一个可枚举的 Symbol 属性</span><br>obj[<span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)] = <span class="hljs-string">&#x27;Symbol foo&#x27;</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(obj).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[key])<br>&#125;)<br><br><span class="hljs-comment">// 输出结果：Symbol baz Symbol foo</span><br></code></pre></div></td></tr></table></figure><h3 id="5-Reflect-ownKeys"><a href="#5-Reflect-ownKeys" class="headerlink" title="5. Reflect.ownKeys()"></a>5. Reflect.ownKeys()</h3><p><code>Reflect.ownKeys()</code> 返回一个数组，包含对象自身的所有属性。它和<code>Object.keys()</code>类似，<code>Object.keys()</code>返回属性<code>key</code>，但不包括不可枚举的属性，而<code>Reflect.ownKeys()</code>会返回所有属性<code>key</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">b</span>: <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;method&#x27;</span>, &#123;<br><span class="hljs-attr">value</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Non enumerable property&quot;</span>)<br>&#125;,<br><span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span><br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj))<br><span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(obj))<br><span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;method&quot;]</span><br></code></pre></div></td></tr></table></figure><h4 id="注意：-9"><a href="#注意：-9" class="headerlink" title="注意："></a>注意：</h4><ul><li><code>Object.keys()</code> ：相当于返回对象属性数组；</li><li><code>Reflect.ownKeys()</code> :相当于 <code>Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj)</code>。</li></ul><p>总结：</p><table><thead><tr><th><span style='color:#5cb85c'>对象方法</span></th><th align="center"><span style='color:#5cb85c'>遍历基本属性</span></th><th align="center"><span style='color:#5cb85c'>遍历原型链</span></th><th align="center"><span style='color:#5cb85c'>遍历不可枚举属性</span></th><th align="center"><span style='color:#5cb85c'>遍历 Symbol</span></th></tr></thead><tbody><tr><td>for in</td><td align="center">是</td><td align="center">是</td><td align="center">否</td><td align="center">否</td></tr><tr><td>Object.keys()</td><td align="center">是</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr><tr><td>Object.getOwnPropertyNames()</td><td align="center">是</td><td align="center">否</td><td align="center">是</td><td align="center">否</td></tr><tr><td>Object.getOwnPropertySymbols()</td><td align="center">否</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr><tr><td>Reflect.ownKeys()</td><td align="center">是</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr></tbody></table><h2 id="三、其他遍历方法"><a href="#三、其他遍历方法" class="headerlink" title="三、其他遍历方法"></a>三、其他遍历方法</h2><h3 id="1-for"><a href="#1-for" class="headerlink" title="1. for"></a>1. for</h3><p>for 循环是应该是最常见的循环方式了，它由三个表达式组成，分别是声明循环变量、判断循环条件、更新循环变量。这三个表达式用分号分隔。可以使用临时变量将数组的长度缓存起来，避免重复获取数组长度，当数组较大时优化效果会比较明显。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, len = arr.<span class="hljs-property">length</span>; i &lt; len; i++ )&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i])<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在执行的时候，会先判断执行条件，再执行。<code>for</code> 循环可以用来遍历数组，字符串，类数组，<code>DOM</code> 节点等。可以改变原数组。</p><h3 id="2-while"><a href="#2-while" class="headerlink" title="2. while"></a>2. while</h3><p><code>while</code>循环中的结束条件可以是各种类型，但是最终都会转为布尔值，转换规则如下。</p><ul><li><code>Boolean</code>：true 为真，false 为假；</li><li><code>String</code>：空字符串为假，所有非空字符串为真；</li><li><code>Number</code>：0 为假，非 0 数字为真；</li><li><code>null</code>&#x2F;<code>Undefined</code>&#x2F;<code>NaN</code>：全为假；</li><li><code>Object</code>：全为真。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (num &lt; <span class="hljs-number">10</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>    num ++;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>while</code> 和 <code>for</code> 一样，都是先判断，再执行。只要指定条件为 <code>true</code>，循环就可以一直执行代码。</p><h3 id="3-do-x2F-while"><a href="#3-do-x2F-while" class="headerlink" title="3. do &#x2F; while"></a>3. do &#x2F; while</h3><p>该方法会先执行再判断，即使初始条件不成立，<code>do/while</code>循环也至少会执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">do</span><br>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>    num--;<br>  &#125;<br><span class="hljs-keyword">while</span>(num &gt;= <span class="hljs-number">0</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num); <span class="hljs-comment">//-1</span><br></code></pre></div></td></tr></table></figure><p>不建议使用 do &#x2F; while 来遍历数组。</p><h3 id="4-for-await-of"><a href="#4-for-await-of" class="headerlink" title="4. for await of"></a>4. for await of</h3><p><code>for await...of</code>方法被称为异步迭代器，该方法是主要用来遍历异步对象。它是 ES2018 中引入的方法。<br><code>for await...of</code> 语句会在异步或者同步可迭代对象上创建一个迭代循环，包括 <code>String</code>、<code>Array</code>类数组,<code>Map</code>、 <code>Set</code> 和自定义的异步或者同步可迭代对象。这个语句只能在 <code>async</code> <code>function</code> 内使用：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Gen</span> (time) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-title function_">resolve</span>(time)<br>    &#125;,time)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> () &#123;<br>   <span class="hljs-keyword">let</span> arr = [<span class="hljs-title class_">Gen</span>(<span class="hljs-number">2000</span>),<span class="hljs-title class_">Gen</span>(<span class="hljs-number">100</span>),<span class="hljs-title class_">Gen</span>(<span class="hljs-number">3000</span>)]<br>   <span class="hljs-keyword">for</span> <span class="hljs-keyword">await</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>(),item)<br>   &#125;<br>&#125;<br><span class="hljs-title function_">test</span>()<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#前端</tag>
      
      <tag>#JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue项目优化打包——前端加分项</title>
    <link href="/2022/03/08/article-7/"/>
    <url>/2022/03/08/article-7/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p class="note note-success">Vue项目开发完毕后，对项目进行打包发布之前，必不可少的操作就是项目优化，这也是程序猿的加分项。跟随本文的脚步来看看如何对项目进行优化吧~</p><span id="more"></span><h2 id="一、路由懒加载"><a href="#一、路由懒加载" class="headerlink" title="一、路由懒加载"></a>一、路由懒加载</h2><h3 id="1-为什么需要路由懒加载"><a href="#1-为什么需要路由懒加载" class="headerlink" title="1. 为什么需要路由懒加载"></a>1. 为什么需要路由懒加载</h3><p>当刚运行项目的时候，发现刚进入页面，就将所有的 js 文件和 css 文件加载了进来，这一进程十分的消耗时间。<br>如果打开哪个页面就对应的加载响应页面的 js 文件和 css 文件，那么页面加载速度会大大提升。</p><h3 id="2-如何实现路由懒加载"><a href="#2-如何实现路由懒加载" class="headerlink" title="2. 如何实现路由懒加载"></a>2. 如何实现路由懒加载</h3><p>vue 官方文档：<a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html">路由懒加载</a>代码如下（示例）:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/login/index&#x27;</span>),<br>  <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span><br>&#125;,<br></code></pre></div></td></tr></table></figure><h3 id="3-路由懒加载中的魔法注释"><a href="#3-路由懒加载中的魔法注释" class="headerlink" title="3. 路由懒加载中的魔法注释"></a>3. 路由懒加载中的魔法注释</h3><p>通过在注释中指定 <code>webpackChunkName</code>，可以自定义这个文件的名字。<br>代码如下（示例）:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">components = <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-regexp">/_ webpackChunkName:&quot;login&quot;_/</span> <span class="hljs-string">&quot;../component/Login.vue&quot;</span>)<br></code></pre></div></td></tr></table></figure><h2 id="二、分析包大小"><a href="#二、分析包大小" class="headerlink" title="二、分析包大小"></a>二、分析包大小</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h3><p>想要知道打包生成的文件中，每个文件所占的空间大小。以便于我们分析，对代码进行优化处理。</p><h3 id="2-如何生成打包分析文件"><a href="#2-如何生成打包分析文件" class="headerlink" title="2. 如何生成打包分析文件"></a>2. 如何生成打包分析文件</h3><p>终端中运行 <code>npm run preview -- --report</code>, 这个命令会从我们的入口 main.js 进行依赖分析，分析出各个包的大小。最终会在生成的 dist 文件夹下生成一个 report.html 的文件，打开后就可以看到我们在项目使用文件占据的空间大小啦~<br>(效果图如下：)</p><p><img src="/./images/a8edced7345a44a1b732df1bb2596db1.jpg" alt="report.html"></p><h2 id="三、webpack-配置排除打包"><a href="#三、webpack-配置排除打包" class="headerlink" title="三、webpack 配置排除打包"></a>三、webpack 配置排除打包</h2><h3 id="1-需求-1"><a href="#1-需求-1" class="headerlink" title="1. 需求"></a>1. 需求</h3><p>将一些不常用的包，排除在生成的打包文件以外。例如：上图所示的 xsxl.js 、 element.js，可以将其排除在打包生成的文件以外</p><h3 id="2-排除打包"><a href="#2-排除打包" class="headerlink" title="2. 排除打包"></a>2. 排除打包</h3><p>找到 <code>vue.config.js</code>， 添加 <code>externals</code> 项，具体如下：<br>代码如下（示例）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-attr">configureWebpack</span>: &#123;<br>  <span class="hljs-comment">// 配置单页应用程序的页面的标题</span><br>  <span class="hljs-attr">name</span>: name,<br>  <span class="hljs-attr">externals</span>: &#123;<br>    /\*\*<br>    _ externals 对象属性解析。<br>    _ 基本格式：<br>    _ <span class="hljs-string">&#x27;包名&#x27;</span> : <span class="hljs-string">&#x27;在项目中引入的名字&#x27;</span><br>    _<br>    \*/<br>    <span class="hljs-string">&#x27;vue&#x27;</span>: <span class="hljs-string">&#x27;Vue&#x27;</span>,<br>    <span class="hljs-string">&#x27;element-ui&#x27;</span>: <span class="hljs-string">&#x27;ElementUI&#x27;</span>,<br>    <span class="hljs-string">&#x27;xlsx&#x27;</span>: <span class="hljs-string">&#x27;XLSX&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>    <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="四、-引用网络资源"><a href="#四、-引用网络资源" class="headerlink" title="四、 引用网络资源"></a>四、 引用网络资源</h2><h3 id="1-需求-2"><a href="#1-需求-2" class="headerlink" title="1. 需求"></a>1. 需求</h3><p>我们进行了上一步操作以后，打包生成后的包小了很多。但是呢，没有这些依赖包的话，项目上线是没有办法运行的。那么就需要引用网络中的资源，来支持我们代码的运行。</p><h3 id="2-CDN"><a href="#2-CDN" class="headerlink" title="2. CDN"></a>2. CDN</h3><p><code>CDN</code> 全称叫做“Content Delivery Network”，中文叫内容分发网络。我们用它来提高访问速度<br>把一些静态资源：css， .js，图片，视频放在第三方的 CDN 服务器上，可以加速访问速度。</p><h4 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h4><p>减少应用打包出来的包体积<br>加快静态资源的访问<br>利用浏览器缓存，不会变动的文件长期缓存</p><h3 id="3-实现步骤"><a href="#3-实现步骤" class="headerlink" title="3. 实现步骤"></a>3. 实现步骤</h3><p>注意:在开发环境时，文件资源还是可以从本地 <code>node_modules</code> 中取出，而只有项目上线了，才需要去使用外部资源。此时我们可以使用环境变量来进行区分。具体如下：<br>代码如下（示例）：<br>在 <code>vue.config.js</code> 文件中:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> externals = &#123;&#125;<br><span class="hljs-keyword">let</span> cdn = &#123; <span class="hljs-attr">css</span>: [], <span class="hljs-attr">js</span>: [] &#125;<br><span class="hljs-keyword">const</span> isProduction = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span> <span class="hljs-comment">// 判断是否是生产环境</span><br><span class="hljs-keyword">if</span> (isProduction) &#123;<br>  externals = &#123;<br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">      * externals 对象属性解析：</span><br><span class="hljs-comment">      * &#x27;包名&#x27; : &#x27;在项目中引入的名字&#x27;</span><br><span class="hljs-comment">    */</span><br>      <span class="hljs-string">&#x27;vue&#x27;</span>: <span class="hljs-string">&#x27;Vue&#x27;</span>,<br>      <span class="hljs-string">&#x27;element-ui&#x27;</span>: <span class="hljs-string">&#x27;ELEMENT&#x27;</span>,<br>      <span class="hljs-string">&#x27;xlsx&#x27;</span>: <span class="hljs-string">&#x27;XLSX&#x27;</span><br>  &#125;<br>  cdn = &#123;<br>    <span class="hljs-attr">css</span>: [<br>      <span class="hljs-string">&#x27;https://unpkg.com/element-ui/lib/theme-chalk/index.css&#x27;</span> <span class="hljs-comment">// element-ui css 样式表</span><br>    ],<br>    <span class="hljs-attr">js</span>: [<br>      <span class="hljs-comment">// vue must at first!</span><br>      <span class="hljs-string">&#x27;https://unpkg.com/vue@2.6.12/dist/vue.js&#x27;</span>, <span class="hljs-comment">// vuejs</span><br>      <span class="hljs-string">&#x27;https://unpkg.com/element-ui/lib/index.js&#x27;</span>, <span class="hljs-comment">// element-ui js</span><br>      <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/npm/xlsx@0.16.6/dist/xlsx.full.min.js&#x27;</span>, <span class="hljs-comment">// xlsx</span><br>    ]<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>webpack 配置 <code>externals</code> 配置项</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-attr">configureWebpack</span>: &#123;<br>  <span class="hljs-comment">// 配置单页应用程序的页面的标题</span><br>  <span class="hljs-attr">name</span>: name,<br>  <span class="hljs-attr">externals</span>: externals,<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过 <code>html-webpack-plugin</code> 注入到 <code>index.html</code> 之中:<br>在<code>vue.config.js</code>文件中配置:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-title function_">chainWebpack</span>(<span class="hljs-params">config</span>) &#123;<br>  config.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&#x27;preload&#x27;</span>).<span class="hljs-title function_">tap</span>(<span class="hljs-function">() =&gt;</span> [<br>    &#123;<br>      <span class="hljs-attr">rel</span>: <span class="hljs-string">&#x27;preload&#x27;</span>,<br>      <span class="hljs-attr">fileBlacklist</span>: [<span class="hljs-regexp">/\.map$/</span>, <span class="hljs-regexp">/hot-update\.js$/</span>, <span class="hljs-regexp">/runtime\..*\.js$/</span>],<br>      <span class="hljs-attr">include</span>: <span class="hljs-string">&#x27;initial&#x27;</span><br>    &#125;<br>  ])<br>  <span class="hljs-comment">// 注入cdn变量 (打包时会执行)</span><br>  config.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&#x27;html&#x27;</span>).<span class="hljs-title function_">tap</span>(<span class="hljs-function"><span class="hljs-params">args</span> =&gt;</span> &#123;<br>    args[<span class="hljs-number">0</span>].<span class="hljs-property">cdn</span> = cdn <span class="hljs-comment">// 配置cdn给插件</span><br>    <span class="hljs-keyword">return</span> args<br>  &#125;)<br>  <span class="hljs-comment">// 省略其他...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>找到 <code>public/index.html</code> 通过配置 CDN Config 依次注入 css 和 js。修改 head 的内容如下:</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">    <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&lt;%= webpackConfig.name %&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 引入样式 --&gt;</span><br>  &lt;% for(var css of htmlWebpackPlugin.options.cdn.css) &#123; %&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%=css%&gt;&quot;</span> /&gt;</span><br>  &lt;% &#125; %&gt;<br><br>  <span class="hljs-comment">&lt;!-- 引入JS --&gt;</span><br>  &lt;% for(var js of htmlWebpackPlugin.options.cdn.js) &#123; %&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&lt;%=js%&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  &lt;% &#125; %&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="五、-打包去除-console-log"><a href="#五、-打包去除-console-log" class="headerlink" title="五、 打包去除 console.log"></a>五、 打包去除 <code>console.log</code></h2><h3 id="1-需求-3"><a href="#1-需求-3" class="headerlink" title="1. 需求"></a>1. 需求</h3><p>在项目打包上线后，去除掉代码中所有的 <code>console.log</code></p><h3 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><p>在 <code>vue.config.js</code> 文件中配置：<br>代码如下（示例）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-title function_">chainWebpack</span>(<span class="hljs-params">config</span>) &#123;<br>  config.<span class="hljs-property">optimization</span>.<span class="hljs-title function_">minimizer</span>(<span class="hljs-string">&#x27;terser&#x27;</span>).<span class="hljs-title function_">tap</span>(<span class="hljs-function">(<span class="hljs-params">args</span>) =&gt;</span> &#123;<br>    args[<span class="hljs-number">0</span>].<span class="hljs-property">terserOptions</span>.<span class="hljs-property">compress</span>.<span class="hljs-property">drop_console</span> = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">return</span> args<br>  &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#Vue.js</tag>
      
      <tag>#前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优雅的 JavaScript 个技巧</title>
    <link href="/2022/03/08/article-6/"/>
    <url>/2022/03/08/article-6/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 有很多很酷的特性，大多数初学者和中级开发人员都不知道。今天分享一些，我经常在项目中使用一些技巧。</p><span id="more"></span><h3 id="1-有条件地向对象添加属性"><a href="#1-有条件地向对象添加属性" class="headerlink" title="1. 有条件地向对象添加属性"></a>1. 有条件地向对象添加属性</h3><p>我们可以使用展开运算符号(<code>...</code>)来有条件地向 JS 对象快速添加属性。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> condition = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">const</span> person = &#123;<br><span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>...(condition &amp;&amp; &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">16</span> &#125;),<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>如果每个操作数的值都为 <code>true</code>，则 <code>&amp;&amp;</code> 操作符返回最后一个求值表达式。因此返回一个对象<code>&#123;age: 16&#125;</code>，然后将其扩展为 <code>person</code> 对象的一部分。<br>如果 <code>condition</code> 为 <code>false</code>，JavaScript 会做这样的事情:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> person = &#123;<br><span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span>,<br>...(<span class="hljs-literal">false</span>),<br>&#125;;<br><span class="hljs-comment">// 展开 `false` 对对象没有影响</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person); <span class="hljs-comment">// &#123; id: 1, name: &#x27;John Doe&#x27; &#125;</span><br></code></pre></div></td></tr></table></figure><h3 id="2-检查属性是否存在对象中"><a href="#2-检查属性是否存在对象中" class="headerlink" title="2.检查属性是否存在对象中"></a>2.检查属性是否存在对象中</h3><p>可以使用 <code>in</code> 关键字来检查 JavaScript 对象中是否存在某个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span>, <span class="hljs-attr">salary</span>: <span class="hljs-number">1000</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;salary&#x27;</span> <span class="hljs-keyword">in</span> person); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;age&#x27;</span> <span class="hljs-keyword">in</span> person); <span class="hljs-comment">// false</span><br><br></code></pre></div></td></tr></table></figure><h3 id="3-对象中的动态属性名称"><a href="#3-对象中的动态属性名称" class="headerlink" title="3.对象中的动态属性名称"></a>3.对象中的动态属性名称</h3><p>使用动态键设置对象属性很简单。只需使用<code>[&#39;key name&#39;]</code>来添加属性:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> dynamic = <span class="hljs-string">&#x27;flavour&#x27;</span>;<br><span class="hljs-keyword">var</span> item = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span>,<br>[dynamic]: <span class="hljs-string">&#x27;巧克力&#x27;</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item); <span class="hljs-comment">// &#123; name: &#x27;Robbin&#x27;, flavour: &#x27;巧克力&#x27; &#125;</span><br></code></pre></div></td></tr></table></figure><p>同样的技巧也可用于使用动态键引用对象属性：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> keyName = <span class="hljs-string">&#x27;name&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item[keyName]); <span class="hljs-comment">// returns &#x27;Robbin&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="4-使用动态键进行对象解构"><a href="#4-使用动态键进行对象解构" class="headerlink" title="4. 使用动态键进行对象解构"></a>4. 使用动态键进行对象解构</h3><p>我们知道在对象解构时，可以使用 <code>:</code> 来对解构的属性进行重命名。但，你是否知道键名是动态的时，也可以解构对象的属性？</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> person = &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span> &#125;;<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">name</span>: personName &#125; = person;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(personName); <span class="hljs-comment">// &#x27;Robbin&#x27;</span><br></code></pre></div></td></tr></table></figure><p>现在，我们用动态键来解构属性：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> templates = &#123;<br><span class="hljs-string">&#x27;hello&#x27;</span>: <span class="hljs-string">&#x27;Hello there&#x27;</span>,<br><span class="hljs-string">&#x27;bye&#x27;</span>: <span class="hljs-string">&#x27;Good bye&#x27;</span><br>&#125;;<br><span class="hljs-keyword">const</span> templateName = <span class="hljs-string">&#x27;bye&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123; [templateName]: template &#125; = templates;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(template); <span class="hljs-comment">// Good bye</span><br></code></pre></div></td></tr></table></figure><h3 id="5-空值合并-操作符"><a href="#5-空值合并-操作符" class="headerlink" title="5. 空值合并 ?? 操作符"></a>5. 空值合并 <code>??</code> 操作符</h3><p>当我们想检查一个变量是否为 <code>null</code> 或 <code>undefined</code> 时，??操作符很有用。当它的左侧操作数为 <code>null</code> 或 <code>undefined</code> 时，它返回右侧的操作数，否则返回其左侧的操作数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> foo = <span class="hljs-literal">null</span> ?? <span class="hljs-string">&#x27;Hello&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo); <span class="hljs-comment">// &#x27;Hello&#x27;</span><br><br><span class="hljs-keyword">const</span> bar = <span class="hljs-string">&#x27;Not null&#x27;</span> ?? <span class="hljs-string">&#x27;Hello&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar); <span class="hljs-comment">// &#x27;Not null&#x27;</span><br><br><span class="hljs-keyword">const</span> baz = <span class="hljs-number">0</span> ?? <span class="hljs-string">&#x27;Hello&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(baz); <span class="hljs-comment">// 0</span><br></code></pre></div></td></tr></table></figure><p>在第三个示例中，返回 <code>0</code>，因为即使 <code>0</code> 在 JS 中被认为是假的，但它不是 <code>null</code> 的或 <code>undefined</code> 的。你可能认为我们可以用||算子但这两者之间是有区别的</p><p>你可能认为我们可以在这里使用 <code>||</code> 操作符，但这两者之间是有区别的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> cannotBeZero = <span class="hljs-number">0</span> || <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cannotBeZero); <span class="hljs-comment">// 5</span><br><br><span class="hljs-keyword">const</span> canBeZero = <span class="hljs-number">0</span> ?? <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(canBeZero); <span class="hljs-comment">// 0</span><br></code></pre></div></td></tr></table></figure><h3 id="6-可选链"><a href="#6-可选链" class="headerlink" title="6.可选链 ?."></a>6.可选链 <code>?.</code></h3><p>我们是不是经常遇到这样的错误： <code>TypeError: Cannot read property &#39;foo&#39; of null</code>。这对每一个毅开发人员来说都是一个烦人的问题。引入可选链就是为了解决这个问题。一起来看看：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> book = &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Title&#x27;</span>, <span class="hljs-attr">author</span>: <span class="hljs-literal">null</span> &#125;;<br><br><span class="hljs-comment">// 通常情况下，你会这样做</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(book.<span class="hljs-property">author</span>.<span class="hljs-property">age</span>) <span class="hljs-comment">// throws error</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(book.<span class="hljs-property">author</span> &amp;&amp; book.<span class="hljs-property">author</span>.<span class="hljs-property">age</span>); <span class="hljs-comment">// null</span><br><br><span class="hljs-comment">// 使用可选链</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(book.<span class="hljs-property">author</span>?.<span class="hljs-property">age</span>); <span class="hljs-comment">// undefined</span><br><span class="hljs-comment">// 或深度可选链</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(book.<span class="hljs-property">author</span>?.<span class="hljs-property">address</span>?.<span class="hljs-property">city</span>); <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><p>还可以使用如下函数可选链：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> person = &#123;<br><span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;前端&#x27;</span>,<br><span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span>,<br><span class="hljs-attr">printName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.firstName&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.lastName&#125;</span>`</span>;<br>&#125;,<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-title function_">printName</span>()); <span class="hljs-comment">// &#x27;前端 Robbin&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(persone.<span class="hljs-property">doesNotExist</span>?.()); <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><h3 id="7-使用-操作符"><a href="#7-使用-操作符" class="headerlink" title="7. 使用 !! 操作符"></a>7. 使用 <code>!!</code> 操作符</h3><p>!! 运算符可用于将表达式的结果快速转换为布尔值(<code>true</code> 或 <code>false</code>):</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> greeting = <span class="hljs-string">&#x27;Hello there!&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(!!greeting) <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">const</span> noGreeting = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(!!noGreeting); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><h3 id="8-字符串和整数转换"><a href="#8-字符串和整数转换" class="headerlink" title="8. 字符串和整数转换"></a>8. 字符串和整数转换</h3><p>使用 <code>+</code> 操作符将字符串快速转换为数字:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> stringNumer = <span class="hljs-string">&#x27;123&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(+stringNumer); <span class="hljs-comment">//123</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> +stringNumer); <span class="hljs-comment">//&#x27;number&#x27;</span><br></code></pre></div></td></tr></table></figure><p>要将数字快速转换为字符串，也可以使用 <code>+</code> 操作符，后面跟着一个空字符串:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> myString = <span class="hljs-number">25</span> + <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myString); <span class="hljs-comment">//&#x27;25&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> myString); <span class="hljs-comment">//&#x27;string&#x27;</span><br></code></pre></div></td></tr></table></figure><p>这些类型转换非常方便，但它们的清晰度和代码可读性较差。所以实际开发，需要慎重的选择使用。</p><h3 id="9-检查数组中的假值"><a href="#9-检查数组中的假值" class="headerlink" title="9. 检查数组中的假值"></a>9. 检查数组中的假值</h3><p>大家应该都用过数组方法：<code>filter</code>、<code>some</code>、<code>every</code>，这些方法可以配合 <code>Boolean</code> 方法来测试真假值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> myArray = [<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-number">0</span>];<br><br><span class="hljs-comment">// 过滤虚值</span><br><span class="hljs-keyword">const</span> filtered = myArray.<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(filtered); <span class="hljs-comment">// [&#x27;Hello&#x27;]</span><br><br><span class="hljs-comment">// 检查至少一个值是否为真</span><br><span class="hljs-keyword">const</span> anyTruthy = myArray.<span class="hljs-title function_">some</span>(<span class="hljs-title class_">Boolean</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anyTruthy); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 检查所有的值是否为真</span><br><span class="hljs-keyword">const</span> allTruthy = myArray.<span class="hljs-title function_">every</span>(<span class="hljs-title class_">Boolean</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(allTruthy); <span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><p>下面是它的工作原理。我们知道这些数组方法接受一个回调函数，所以我们传递 <code>Boolean</code> 作为回调函数。<code>Boolean</code> 函数本身接受一个参数，并根据参数的真实性返回 <code>true</code> 或 <code>false</code>。所以：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">myArray.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> <span class="hljs-title class_">Boolean</span>(val));<br></code></pre></div></td></tr></table></figure><p>等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">myArray.<span class="hljs-title function_">filter</span>(<span class="hljs-title class_">Boolean</span>);<br></code></pre></div></td></tr></table></figure><h3 id="10-扁平化数组"><a href="#10-扁平化数组" class="headerlink" title="10. 扁平化数组"></a>10. 扁平化数组</h3><p>在原型 Array 上有一个方法 <code>flat</code>，可以从一个数组的数组中制作一个单一的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> myArray = [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;, [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;], [&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> &#125;]];<br><br><span class="hljs-keyword">const</span> flattedArray = myArray.<span class="hljs-title function_">flat</span>();<br><span class="hljs-comment">//[ &#123; id: 1 &#125;, &#123; id: 2 &#125;, &#123; id: 3 &#125; ]</span><br></code></pre></div></td></tr></table></figure><p>你也可以定义一个深度级别，指定一个嵌套的数组结构应该被扁平化的深度。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [[[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]]];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">flat</span>(<span class="hljs-number">2</span>)); <span class="hljs-comment">// returns [0, 1, 2, [3,4]]</span><br></code></pre></div></td></tr></table></figure><h3 id="11-Object-entries"><a href="#11-Object-entries" class="headerlink" title="11.Object.entries"></a>11.Object.entries</h3><p>大多数开发人员使用 <code>Object.keys</code> 方法来迭代对象。 此方法仅返回对象键的数组，而不返回值。 我们可以使用 <code>Object.entries</code> 来获取键和值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> person = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Robbin&#x27;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(person); <span class="hljs-comment">// [&#x27;name&#x27;, &#x27;age&#x27;]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(data); <span class="hljs-comment">// [[&#x27;name&#x27;, &#x27;Robbin&#x27;], [&#x27;age&#x27;, 20]]</span><br></code></pre></div></td></tr></table></figure><p>为了迭代一个对象，我们可以执行以下操作：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(person).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span> is <span class="hljs-subst">$&#123;person[key]&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-comment">// 使用 entries 获取键和值</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(person).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[key, value]</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span> is <span class="hljs-subst">$&#123;value&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-comment">// name is Robbin</span><br><span class="hljs-comment">// age is 20</span><br></code></pre></div></td></tr></table></figure><p>上述两种方法都返回相同的结果，但 <code>Object.entries</code> 获取键值对更容易。</p><h3 id="12-replaceAll-方法"><a href="#12-replaceAll-方法" class="headerlink" title="12.replaceAll 方法"></a>12.replaceAll 方法</h3><p>在 JS 中，要将所有出现的字符串替换为另一个字符串，我们需要使用如下所示的正则表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;Red-Green-Blue&#x27;</span>;<br><br><span class="hljs-comment">// 只规制第一次出现的</span><br>str.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">// Red Green-Blue</span><br><br><span class="hljs-comment">// 使用 RegEx 替换所有匹配项</span><br>str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\-/g</span>, <span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">// Red Green Blue</span><br></code></pre></div></td></tr></table></figure><p>但是在 ES12 中，一个名为 <code>replaceAll</code> 的新方法被添加到 <code>String.prototype</code> 中，它用另一个字符串值替换所有出现的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">str.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">// Red Green Blue</span><br></code></pre></div></td></tr></table></figure><h3 id="13-数字分隔符"><a href="#13-数字分隔符" class="headerlink" title="13.数字分隔符"></a>13.数字分隔符</h3><p>可以使用下划线作为数字分隔符，这样可以方便地计算数字中 0 的个数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 难以阅读</span><br><span class="hljs-keyword">const</span> billion = <span class="hljs-number">1000000000</span>;<br><br><span class="hljs-comment">// 易于阅读</span><br><span class="hljs-keyword">const</span> readableBillion = <span class="hljs-number">1000_000_000</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(readableBillion) <span class="hljs-comment">//1000000000</span><br></code></pre></div></td></tr></table></figure><p>下划线分隔符也可以用于 BigInt 数字，如下例所示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> trillion = <span class="hljs-number">1000_000_000_000n</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(trillion); <span class="hljs-comment">// 10000000000</span><br></code></pre></div></td></tr></table></figure><h3 id="14-document-designMode"><a href="#14-document-designMode" class="headerlink" title="14.document.designMode"></a>14.document.designMode</h3><p>与前端的 JavaScript 有关，设计模式让你可以编辑页面上的任何内容。只要打开浏览器控制台，输入以下内容即可。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">designMode</span> = <span class="hljs-string">&#x27;on&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="15-逻辑赋值运算符"><a href="#15-逻辑赋值运算符" class="headerlink" title="15.逻辑赋值运算符"></a>15.逻辑赋值运算符</h3><p>逻辑赋值运算符是由逻辑运算符<code>&amp;&amp;</code>、<code>||</code>、<code>??</code>和赋值运算符<code>=</code>组合而成。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> b = <span class="hljs-number">2</span>;<br><br>a &amp;&amp;= b;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 2</span><br><br><span class="hljs-comment">// 上面等价于</span><br>a &amp;&amp; (a = b);<br><br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">if</span> (a) &#123;<br>a = b<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>检查 <code>a</code> 的值是否为真，如果为真，那么更新 <code>a</code> 的值。使用逻辑或 <code>||</code>操作符也可以做同样的事情。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> a = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> b = <span class="hljs-number">3</span>;<br><br>a ||= b;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 上面等价于</span><br>a || (a = b);<br></code></pre></div></td></tr></table></figure><p>使用空值合并操作符 ??:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> a = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> b = <span class="hljs-number">3</span>;<br><br>a ??= b;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 上面等价于</span><br><span class="hljs-keyword">if</span> (a === <span class="hljs-literal">null</span> || a === <span class="hljs-literal">undefined</span>) &#123;<br>  a = b;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意：<code>??</code>操作符只检查 <code>null</code> 或 <code>undefined</code> 的值。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#前端</tag>
      
      <tag>#JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【面试】说说typeof和instanceof的区别</title>
    <link href="/2022/03/08/article-5/"/>
    <url>/2022/03/08/article-5/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>typeof 和 instanceof 操作符都是用来判断数据类型的，但是它们的使用场景却各不相同，其中一些细节也需要特别注意。接下来让我们一探究竟，彻底掌握该知识点，再也不惧面试官的提问。</p><span id="more"></span><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof 是一个一元运算符，放在一个运算数前面，这个运算数可以是任何类型。它返回一个字符串，说明运算数的类型。请看栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> type =  <span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;中国万岁&#x27;</span>; <span class="hljs-comment">// string</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">666</span>; <span class="hljs-comment">// number</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// boolean</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span>(); <span class="hljs-comment">// symbol</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">1n</span>; <span class="hljs-comment">// bigint</span><br><span class="hljs-keyword">typeof</span> () =&gt; &#123;&#125;; <span class="hljs-comment">// function</span><br><br><span class="hljs-keyword">typeof</span> []; <span class="hljs-comment">// object</span><br><span class="hljs-keyword">typeof</span> &#123;&#125;; <span class="hljs-comment">// object</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>); <span class="hljs-comment">// object</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// object</span><br></code></pre></div></td></tr></table></figure><p>通过以上例子可以看出，typeof 只能准确判断基本数据类型和函数（函数其实是对象，并不属于另一种数据类型，但也能够使用 typeof 进行区分），无法精确判断出引用数据类型（统统返回 object）。<br>有一点需要注意，调用 typeof null 返回的是 object，这是因为特殊值 null 被认为是一个对空对象的引用（也叫空对象指针）。<br>如果想准确判断引用数据类型，可以用 instanceof 运算符。</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>instanceof 运算符放在一个运算数的后面，对象的前面。它返回一个布尔值，说明运算数是否是某个对象的实例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> result = [] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>; <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Person</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;;<br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>; <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">const</span> message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>);<br>message <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span>; <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>typeof 会返回一个运算数的基本类型，instanceof 返回的是布尔值</p><p>instanceof 可以准确判断引用数据类型，但是不能正确判断基本数据类型</p><p>typeof 虽然可以判断基本数据类型（null 除外），但是无法判断引用数据类型（function 除外）</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>Object.prototype.toString.call()<br>typeof 和 instanceof 都有一定的弊端，并不能满足所有场景的需求。如果需要通用检测数据类型，可以使用 Object.prototype.toString.call()方法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(&#123;&#125;); <span class="hljs-comment">// &quot;[object Object]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>([]); <span class="hljs-comment">// &quot;[object Array]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-number">666</span>); <span class="hljs-comment">// &quot;[object Number]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>); <span class="hljs-comment">// &quot;[object String]&quot;</span><br></code></pre></div></td></tr></table></figure><p>注意，该方法返回的是一个格式为”[object Object]”的字符串。<br>封装函数<br>为了更方便的使用，我们可以将这个方法进行封装：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getType</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">let</span> type = <span class="hljs-keyword">typeof</span> value;<br>    <span class="hljs-keyword">if</span> (type !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123; <span class="hljs-comment">// 如果是基本数据类型，直接返回</span><br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br>    <span class="hljs-comment">// 如果是引用数据类型，再进一步判断，正则返回结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(value).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\[object (\S+)\]$/</span>, <span class="hljs-string">&#x27;$1&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">getType</span>(<span class="hljs-number">123</span>); <span class="hljs-comment">// number</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>); <span class="hljs-comment">// string</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;); <span class="hljs-comment">// function</span><br><span class="hljs-title function_">getType</span>([]); <span class="hljs-comment">// Array</span><br><span class="hljs-title function_">getType</span>(&#123;&#125;); <span class="hljs-comment">// Object</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// Null</span><br></code></pre></div></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>如果文中有错误或者不足之处，欢迎大家在评论区指正。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#前端</tag>
      
      <tag>#面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid 页脚增加网站运行时长</title>
    <link href="/2022/03/07/article-4/"/>
    <url>/2022/03/07/article-4/</url>
    
    <content type="html"><![CDATA[<p>Fluid 1.8.4 版本支持自定义页脚内容了，群友常改的网站运行时长，这次无需再修改源代码。</p><p>只需要在主题配置中的 <code>footer: content</code> 添加：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs XML">footer:<br>  content: &#x27;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://hexo.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hexo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-love&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Fluid<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 0.85rem&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/duration.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  &#x27;<br></code></pre></div></td></tr></table></figure><p><code>content</code> 前三行是 Fluid 原有的页脚内容，建议不要删除，可稍作修改，保留 Fluid 的超链接，用于向更多人推广主题。</p><p><code>duration.js</code> 包含的才是功能代码，我们在博客目录下创建 <code>source/js/duration.js</code>，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/** 计时起始时间，自行修改 **/</span><br>  <span class="hljs-keyword">var</span> start = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2022/02/02 00:00:00&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    now.<span class="hljs-title function_">setTime</span>(now.<span class="hljs-title function_">getTime</span>()+<span class="hljs-number">250</span>);<br>    days = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>;<br>    dnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(days);<br>    hours = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum);<br>    hnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(hours);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(hnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;<br>    &#125;<br>    minutes = (now - start) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>    mnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(minutes);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(mnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;<br>    &#125;<br>    seconds = (now - start) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>    snum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(seconds);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(snum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      snum = <span class="hljs-string">&quot;0&quot;</span> + snum;<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timeDate&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;本站安全运行&amp;nbsp&quot;</span>+dnum+<span class="hljs-string">&quot;&amp;nbsp天&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;times&quot;</span>).<span class="hljs-property">innerHTML</span> = hnum + <span class="hljs-string">&quot;&amp;nbsp小时&amp;nbsp&quot;</span> + mnum + <span class="hljs-string">&quot;&amp;nbsp分&amp;nbsp&quot;</span> + snum + <span class="hljs-string">&quot;&amp;nbsp秒&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">update</span>();<br>  <span class="hljs-built_in">setInterval</span>(update, <span class="hljs-number">1000</span>);<br>&#125;)();<br></code></pre></div></td></tr></table></figure><p>不要忘记把上面注释的时间改为自己的时间，至此这项功能就引入到<code>&lt;footer&gt;</code> 里了。</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#基础</tag>
      
      <tag>#Fluid</tag>
      
      <tag>#页脚</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7个常见的前端手写功能</title>
    <link href="/2022/03/07/article-2/"/>
    <url>/2022/03/07/article-2/</url>
    
    <content type="html"><![CDATA[<p>今天给大家带来的是 7 个常见的 JavaScript 手写功能，重要的地方已添加注释。有的是借鉴别人的，有的是自己写的，如有不正确的地方，欢迎多多指正。</p><span id="more"></span><h3 id="1-防抖"><a href="#1-防抖" class="headerlink" title="1.防抖"></a>1.防抖</h3><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span><span class="hljs-params">(fn, delay)</span> &#123;<br>  let timer<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (timer) &#123;<br>      clearTimeout(timer)<br>    &#125;<br>    timer = setTimeout(() =&gt; &#123;<br>      fn.apply(<span class="hljs-keyword">this</span>, args)<br>    &#125;, delay)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">task</span><span class="hljs-params">()</span> &#123;<br>console.log(<span class="hljs-string">&#x27;run task&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">const</span> debounceTask = debounce(task, <span class="hljs-number">1000</span>)<br>window.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, debounceTask)<br><br></code></pre></div></td></tr></table></figure><h3 id="2-节流"><a href="#2-节流" class="headerlink" title="2.节流"></a>2.节流</h3><figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>  let last = <span class="hljs-number">0</span> <span class="hljs-comment">// 上次触发时间</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    const <span class="hljs-built_in">now</span> = <span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>()<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">now</span> - last &gt; delay) &#123;<br>      last = <span class="hljs-built_in">now</span><br>      fn.apply(this, args)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">task</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;run task&#x27;</span>)<br>&#125;<br>const throttleTask = throttle(task, <span class="hljs-number">1000</span>)<br>window.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, throttleTask)<br><br></code></pre></div></td></tr></table></figure><h3 id="3-深拷贝"><a href="#3-深拷贝" class="headerlink" title="3.深拷贝"></a>3.深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj, cache = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span>) &#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">null</span> || <span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&#x27;object&#x27;</span>) <span class="hljs-keyword">return</span> obj<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(obj)<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">RegExp</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(obj)<br><br>  <span class="hljs-keyword">if</span> (cache.<span class="hljs-title function_">get</span>(obj)) <span class="hljs-keyword">return</span> cache.<span class="hljs-title function_">get</span>(obj) <span class="hljs-comment">// 如果出现循环引用，则返回缓存的对象，防止递归进入死循环</span><br>  <span class="hljs-keyword">let</span> cloneObj = <span class="hljs-keyword">new</span> obj.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) <span class="hljs-comment">// 使用对象所属的构造函数创建一个新对象</span><br>  cache.<span class="hljs-title function_">set</span>(obj, cloneObj) <span class="hljs-comment">// 缓存对象，用于循环引用的情况</span><br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>      cloneObj[key] = <span class="hljs-title function_">deepClone</span>(obj[key], cache) <span class="hljs-comment">// 递归拷贝</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> cloneObj<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-attr">address</span>: &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">200</span> &#125; &#125;<br>obj.<span class="hljs-property">a</span> = obj <span class="hljs-comment">// 循环引用</span><br><span class="hljs-keyword">const</span> newObj = <span class="hljs-title function_">deepClone</span>(obj)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newObj.<span class="hljs-property">address</span> === obj.<span class="hljs-property">address</span>) <span class="hljs-comment">// false</span><br><br></code></pre></div></td></tr></table></figure><h3 id="4-异步控制并发数"><a href="#4-异步控制并发数" class="headerlink" title="4.异步控制并发数"></a>4.异步控制并发数</h3><figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">limitRequest</span>(<span class="hljs-params">urls = [], limit = <span class="hljs-number">3</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Promise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    const len = urls.<span class="hljs-built_in">length</span><br>    let <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment">// 同时启动limit个任务</span><br>    <span class="hljs-keyword">while</span> (limit &gt; <span class="hljs-number">0</span>) &#123;<br>      start()<br>      limit -= <span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>      const url = urls.shift() <span class="hljs-comment">// 从数组中拿取第一个任务</span><br>      <span class="hljs-keyword">if</span> (url) &#123;<br>        axios.post(url).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// todo</span><br>        &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// todo</span><br>        &#125;).finally(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">count</span> == len - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 最后一个任务完成</span><br>            resolve()<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 完成之后，启动下一个任务</span><br>            <span class="hljs-built_in">count</span>++<br>            start()<br>          &#125;<br>        &#125;)<br>      &#125;<br>    &#125;<br><br>  &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="5-数组排序"><a href="#5-数组排序" class="headerlink" title="5.数组排序"></a>5.数组排序</h3><p class="note note-success">sort 排序</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 对数字进行排序，简写<br>const arr = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>]<br>arr.sort((a, b) =&gt; a - b)<br>console.log(arr) <span class="hljs-regexp">//</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br><span class="hljs-regexp">//</span> 对字母进行排序，简写<br>const arr = [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>arr.sort()<br>console.log(arr) <span class="hljs-regexp">//</span> [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br><br></code></pre></div></td></tr></table></figure><p class="note note-success">冒泡排序</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bubbleSort</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">let</span> len = arr.<span class="hljs-property">length</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-comment">// 从第一个元素开始，比较相邻的两个元素，前者大就交换位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++) &#123;<br>      <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-keyword">let</span> num = arr[j]<br>        arr[j] = arr[j + <span class="hljs-number">1</span>]<br>        arr[j + <span class="hljs-number">1</span>] = num<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 每次遍历结束，都能找到一个最大值，放在数组最后</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> arr<br>&#125;<br><br><span class="hljs-comment">//测试</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">bubbleSort</span>([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>])) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br><br></code></pre></div></td></tr></table></figure><h3 id="6-数组去重"><a href="#6-数组去重" class="headerlink" title="6.数组去重"></a>6.数组去重</h3><p class="note note-success">Set 去重</p><figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe">const <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = [...<span class="hljs-keyword">new</span> <span class="hljs-type">Set</span>(arr)]<br><span class="hljs-comment">// 或</span><br>const <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = <span class="hljs-keyword">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-type">Set</span>(arr))<br></code></pre></div></td></tr></table></figure><p class="note note-success">indexOf 去重</p><figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">resetArr</span>(<span class="hljs-params">arr</span>) &#123;<br>  let res = []<br>  arr.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-built_in">indexOf</span>(item) === <span class="hljs-number">-1</span>) &#123;<br>      res.<span class="hljs-built_in">push</span>(item)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br>const arr = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(resetArr(arr)) <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></div></td></tr></table></figure><h3 id="7-获取-url-参数"><a href="#7-获取-url-参数" class="headerlink" title="7.获取 url 参数"></a>7.获取 url 参数</h3><p class="note note-success">URLSearchParams 方法</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">// 创建一个URLSearchParams实例</span><br>const urlSearchParams = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URLSearchParams(<span class="hljs-params">window</span>.<span class="hljs-params">location</span>.<span class="hljs-params">search</span>)</span>;<br><span class="hljs-comment">// 把键值对列表转换为一个对象</span><br>const params = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>from<span class="hljs-constructor">Entries(<span class="hljs-params">urlSearchParams</span>.<span class="hljs-params">entries</span>()</span>);<br></code></pre></div></td></tr></table></figure><p class="note note-success">split 方法</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">function <span class="hljs-built_in">getParams</span>(url) &#123;<br>  const res = &#123;&#125;<br>  <span class="hljs-keyword">if</span> (url<span class="hljs-selector-class">.includes</span>(<span class="hljs-string">&#x27;?&#x27;</span>)) &#123;<br>    const str = url<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;?&#x27;</span>)<span class="hljs-selector-attr">[1]</span><br>    const arr = str<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br>    arr<span class="hljs-selector-class">.forEach</span>(item =&gt; &#123;<br>      const key = item<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;=&#x27;</span>)<span class="hljs-selector-attr">[0]</span><br>      const val = item<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;=&#x27;</span>)<span class="hljs-selector-attr">[1]</span><br>      res<span class="hljs-selector-attr">[key]</span> = <span class="hljs-built_in">decodeURIComponent</span>(val) <span class="hljs-comment">// 解码</span><br>    &#125;)<br>  &#125;<br>  return res<br>&#125;<br><br><span class="hljs-comment">// 测试</span><br>const user = <span class="hljs-built_in">getParams</span>(<span class="hljs-string">&#x27;https://www.baidu.com/?user=robbin&amp;age=18&#x27;</span>)<br>console<span class="hljs-selector-class">.log</span>(user) <span class="hljs-comment">// &#123; user: &#x27;robbin&#x27;, age: &#x27;18&#x27; &#125;</span><br><br></code></pre></div></td></tr></table></figure><p>以上就是工作或求职中最常见的手写功能，你是不是全都掌握了呢!!!</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#前端</tag>
      
      <tag>#基础</tag>
      
      <tag>#JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初学者前端入门路线</title>
    <link href="/2022/03/04/article-1/"/>
    <url>/2022/03/04/article-1/</url>
    
    <content type="html"><![CDATA[<p>前端学习路线图和资源自己找上门来，快来收藏！！！<br><img src="/./images/v2-54b23630f61e3f19acbe7089c8ccb1bf_720w.jpg" alt="前端学习路线图"></p><p class="note note-success">HTML+CSS-->移动 web->JavaScript 基础-->Web APIs->数据交互&异步编程-->Node.js-->Vue2+Vue3-->React 核心技术-->微信小程序</p><h2 id="第一阶段：基础入门"><a href="#第一阶段：基础入门" class="headerlink" title="第一阶段：基础入门"></a>第一阶段：基础入门</h2><p><a href="https://www.bilibili.com/video/BV1Kg411T7t9">web 前端开发入门教程，前端零基础 html5+css3+前端项目视频教程</a><br><a href="https://www.bilibili.com/video/BV1xq4y1q7jZ">web 前端进阶教程，前端 html5+css3+移动端项目实战（含华为新闻，b 站移动端等）</a></p><h2 id="第二阶段：技术进阶"><a href="#第二阶段：技术进阶" class="headerlink" title="第二阶段：技术进阶"></a>第二阶段：技术进阶</h2><p><a href="https://www.bilibili.com/video/BV1ux411d75J">JavaScript 全套教程，Web 前端必学的 JS 入门教程，零基础 JavaScript 入门</a><br><a href="https://www.bilibili.com/video/BV1k4411w7sV">JavaScript 核心教程，前端基础教程，JS 必会的 DOM BOM 操作</a><br><a href="https://www.bilibili.com/video/BV1zs411h74a">AJAX 零基础到精通_整合 Git 核心内容全套教程</a></p><h2 id="第三阶段-VUE-开发"><a href="#第三阶段-VUE-开发" class="headerlink" title="第三阶段 VUE 开发"></a>第三阶段 VUE 开发</h2><p><a href="https://www.bilibili.com/video/BV1a34y167AZ">Node.js 全套入门教程，nodejs 最新教程含 es6 模块化+npm+express+webpack+promise 等</a><br><a href="https://www.bilibili.com/video/BV1zq4y1p7ga">Vue 全套视频教程，从 vue2.0 到 vue3.0 一套全覆盖，前端必会的框架教程</a><br><a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=2&vd_source=4e544ca158db1e1cfa46246460a51908">小满zs - Vue3 + vite + Ts + pinia + 实战 + 源码 + electron</a></p><h2 id="第四阶段-React-amp-小程序开发学"><a href="#第四阶段-React-amp-小程序开发学" class="headerlink" title="第四阶段 React&amp;小程序开发学"></a>第四阶段 React&amp;小程序开发学</h2><p><a href="https://www.bilibili.com/video/BV1gh411U7JD">黑马前端 React 精品教程， React 零基础入门到原理详解_哔哩哔哩_bilibili</a><br><a href="https://www.bilibili.com/video/BV1834y1676P">黑马程序员前端微信小程序开发教程，微信小程序从基础到发布全流程_企业级商城实战(含 uni-app 项目多端部署)</a><br>作者：黑马程序员 <a href="https://www.bilibili.com/read/cv10431130?spm_id_from=333.999.0.0">2022 年前端学习路线图</a> 出处：bilibili</p><h2 id="▶-其他前端资源"><a href="#▶-其他前端资源" class="headerlink" title="▶ 其他前端资源"></a>▶ 其他前端资源</h2><p>快速搭建 vue 项目的脚手架<a href="https://cli.vuejs.org/zh/">Vue Cli</a><br>基于 vue 脚手架使用最多的 ui 框架<a href="https://element.eleme.cn/#/zh-CN">Element UI</a></p><h3 id="1-vue-element-admin"><a href="#1-vue-element-admin" class="headerlink" title="1.vue-element-admin"></a>1.vue-element-admin</h3><p><a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a> 是一个后台前端解决方案，它基于 vue 和 element-ui 实现。它使用了最新的前端技术栈，内置了 i18n 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。相信不管你的需求是什么，本项目都能帮助到你。项目作者还搭配了一些教程文章，很值得看！</p><h3 id="2-blog-vue-typescript"><a href="#2-blog-vue-typescript" class="headerlink" title="2.blog-vue-typescript"></a>2.blog-vue-typescript</h3><p><a href="https://github.com/biaochenxuying/blog-vue-typescript">blog-vue-typescript</a> 是基于 Vue 全家桶 + TypeScript + Element-UI 技术栈的简洁时尚博客网站。TypeScript 具有类型系统，且是 JavaScript 的超集，TypeScript 在 2018 年 势头迅猛，可谓遍地开花。Vue3.0 将使用 TS 重写，重写后的 Vue3.0 将更好的支持 TS。2019 年 TypeScript 将会更加普及，能够熟练掌握 TS，并使用 TS 开发过项目，将更加成为前端开发者的优势。</p><h3 id="3-若依管理系统"><a href="#3-若依管理系统" class="headerlink" title="3.若依管理系统"></a>3.若依管理系统</h3><p><a href="http://www.ruoyi.vip/">若依管理系统</a> 基于 SpringBoot 的权限管理系统</p><p><a href="http://doc.ruoyi.vip/ruoyi-vue/">RuoYi-Vue</a> 是一个 Java EE 企业级快速开发平台，基于经典技术组合（Spring Boot、Spring Security、MyBatis、Jwt、Vue），内置模块如：部门管理、角色用户、菜单及按钮授权、数据权限、系统参数、日志管理、代码生成等。在线定时任务配置；支持集群，支持多数据源，支持分布式事务。</p><h3 id="4-Vue-相关开源项目库汇总"><a href="#4-Vue-相关开源项目库汇总" class="headerlink" title="4.Vue 相关开源项目库汇总"></a>4.Vue 相关开源项目库汇总</h3><p><a href="https://github.com/opendigg/awesome-github-vue">Vue 相关开源汇总</a> 汇总了 vue 相关的很多开源项目，star 数相对较多的；包括 UI 组件、框架爱、工具库等等，推荐看！</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#Vue.js</tag>
      
      <tag>#前端</tag>
      
      <tag>#ElementUI</tag>
      
      <tag>#基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建简单的Nodejs服务器</title>
    <link href="/2022/03/04/article/"/>
    <url>/2022/03/04/article/</url>
    
    <content type="html"><![CDATA[<p>1.创建一个 package.json 文件<br>npm init</p><p>2.下载包，–sava 是用来记录并保存下载的包名称在 package.json 文件中<br>npm install 包名称 –save install 可简写成 i<br>如：npm install express –save #可简写形式 npm i express–save<br>在别的地方用安装过得包，只要拷贝 package.json 文件放到要安装的路径下并运行第 1 步</p><p>3.1 express 必须 &#x2F;&#x2F;–sav 是把下载的包名称保存到 package.json 文件中<br>npm install express –save</p><p>3.2 bodyParser 用于解析客户端请求的 body 中的内容,内部使用 JSON 编码处理,url 编码处理以及对于文件的上传处理.<br>npm i body-parser –save</p><p>3.3 mysql 用到数据库下载这个<br>npm install mysql –save</p><p>3.4 cors 跨域<br>npm i cors –save</p><p>下载完成后，在根目录下创建服务器</p><ol><li>创建 server.js 文件<br>server.js 文件代码如下</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入结构件</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);<br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cors&quot;</span>);<br><br><span class="hljs-comment">// 使用express构建web服务器</span><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">var</span> server = app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">4000</span>,<span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器启动成功,IP地址为:http://localhost:4000&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 配置跨域模块，允许那个地址可以跨域访问</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>(&#123;<br><span class="hljs-attr">orign</span>: [<span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>,<br><span class="hljs-string">&quot;http://localhost:8080&quot;</span>],<br><span class="hljs-attr">credentials</span>:<span class="hljs-literal">true</span><br>&#125;));<br><br><span class="hljs-comment">// 使用body-parser中间件</span><br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;));<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;服务器启动成功&quot;</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>然后在浏览器中访问自己设置的 IP 地址 localhost:4000</p><p><img src="/./images/node-server.png" alt="node服务"></p>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>#Express</tag>
      
      <tag>#NodeJs</tag>
      
      <tag>#后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
